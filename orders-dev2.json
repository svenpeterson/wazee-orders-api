{
  "swagger": "2.0",
  "info": {
    "version": "1.0.266",
    "title": "Wazee Digital REST API"
  },
  "basePath": "/identities-api",
  "tags": [
    {
      "name": "Authentication/Authorization"
    },
    {
      "name": "Translations"
    },
    {
      "name": "User Configuration Retrieval"
    },
    {
      "name": "Registration Email List"
    },
    {
      "name": "Transcode Target Configurations"
    },
    {
      "name": "Sites"
    },
    {
      "name": "Users"
    },
    {
      "name": "PayeeConfigs"
    },
    {
      "name": "Fee Configuration"
    },
    {
      "name": "Configurations"
    },
    {
      "name": "Collections"
    },
    {
      "name": "Document Agreements"
    },
    {
      "name": "User Preferences"
    },
    {
      "name": "Admin"
    },
    {
      "name": "Documents"
    },
    {
      "name": "Sort Definitions"
    },
    {
      "name": "Rendition Type Configurations"
    },
    {
      "name": "Comments"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Asset Detail Configurations"
    },
    {
      "name": "API Keys"
    },
    {
      "name": "Search Filters"
    },
    {
      "name": "Access Info (sharing)"
    },
    {
      "name": "User Roles"
    },
    {
      "name": "Activity Audit"
    },
    {
      "name": "DeliveryOptions"
    },
    {
      "name": "Gallery Configurations"
    },
    {
      "name": "License Document Configurations"
    }
  ],
  "paths": {
    "/v1/accessInfo": {
      "post": {
        "tags": [
          "Access Info (sharing)"
        ],
        "summary": "Create an access info object for a specific object from the system.",
        "description": "<strong>Required Permissions</strong>: CreateAccessInfo\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "addAccessInfo",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The access info was added successfully",
            "schema": {
              "$ref": "#/definitions/AccessInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No access info was found"
          }
        },
        "x-requiredPermissions": "CreateAccessInfo"
      }
    },
    "/v1/accessInfo/byApiKey/{apiKey}": {
      "get": {
        "tags": [
          "Access Info (sharing)"
        ],
        "summary": "Find access info by associated API key.",
        "description": "<strong>Required Permissions</strong>: ViewAccessInfo\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getAccessInfoByApiKey",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The access info was found and returned",
            "schema": {
              "$ref": "#/definitions/AccessInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No access info was found"
          }
        },
        "x-requiredPermissions": "ViewAccessInfo"
      }
    },
    "/v1/accessInfo/{id}": {
      "get": {
        "tags": [
          "Access Info (sharing)"
        ],
        "summary": "Find the access info from the system.",
        "description": "<strong>Required Permissions</strong>: ViewAccessInfo\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "AccessInfoGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The access info was found and returned",
            "schema": {
              "$ref": "#/definitions/AccessInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No access info was found"
          }
        },
        "x-requiredPermissions": "ViewAccessInfo"
      },
      "put": {
        "tags": [
          "Access Info (sharing)"
        ],
        "summary": "Update an existing access info.",
        "description": "<strong>Required Permissions</strong>: EditAccessInfo\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "AccessInfoUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccessInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The access info was updated successfully",
            "schema": {
              "$ref": "#/definitions/AccessInfo"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No access info was found"
          },
          "409": {
            "description": "id in path and id in access info object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditAccessInfo"
      },
      "delete": {
        "tags": [
          "Access Info (sharing)"
        ],
        "summary": "Delete an access info from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteAccessInfo\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "AccessInfoDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The access info was deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No access info was found"
          }
        },
        "x-requiredPermissions": "DeleteAccessInfo"
      }
    },
    "/v1/account": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create an account.",
        "description": "<strong>Required Permissions</strong>: CreateAccounts\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "accountCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account was created successfully",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the account"
          }
        },
        "x-requiredPermissions": "CreateAccounts"
      }
    },
    "/v1/account/byIds": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get a list of accounts.",
        "description": "<strong>Required Permissions</strong>: ViewAccounts\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "accountList",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma Separated list of ids to be returned.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The accounts were found and returned",
            "schema": {
              "$ref": "#/definitions/ApiList"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No accounts were found"
          }
        },
        "x-requiredPermissions": "ViewAccounts"
      }
    },
    "/v1/account/search": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find accounts.",
        "description": "<strong>Required Permissions</strong>: ViewAccounts\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "accountSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string. If left blank, it will return all accounts.",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Boolean true or false. Sorts accounts in a descending order if true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "The page index number. The initial page is 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of results per page. The maximum number is 200.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The accounts were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No accounts were found"
          }
        },
        "x-requiredPermissions": "ViewAccounts"
      }
    },
    "/v1/account/searchFields": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find accounts from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewAccounts\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "AccountsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search.",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided.",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Boolean true or false. Sorts accounts in a descending order if true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "The page index number. The initial page is 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of results per page. The maximum number is 200.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The accounts were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No accounts were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewAccounts"
      }
    },
    "/v1/account/{id}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Find an account.",
        "description": "<strong>Required Permissions</strong>: ViewAccounts\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "accountGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the account to be retrieved.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The account was found and returned",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No account was found"
          }
        },
        "x-requiredPermissions": "ViewAccounts"
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update an existing account.",
        "description": "<strong>Required Permissions</strong>: EditAccounts\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "accountUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the account to be updated.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account was updated successfully",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No account was found"
          },
          "409": {
            "description": "id in path and id in account object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditAccounts"
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete an account.",
        "description": "<strong>Required Permissions</strong>: DeleteAccounts\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "accountDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the account to be deleted.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The account was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No account was found"
          }
        },
        "x-requiredPermissions": "DeleteAccounts"
      }
    },
    "/v1/activityAudit": {
      "post": {
        "tags": [
          "Activity Audit"
        ],
        "summary": "Create an activity audit.",
        "description": "<strong>Required Permissions</strong>: CreateActivityAudits\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ActivityAuditCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ActivityAudit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The activity audit was created successfully",
            "schema": {
              "$ref": "#/definitions/ActivityAudit"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "No activity audit was created"
          }
        },
        "x-requiredPermissions": "CreateActivityAudits"
      }
    },
    "/v1/activityAudit/search": {
      "get": {
        "tags": [
          "Activity Audit"
        ],
        "summary": "Find activityÂ audits.",
        "description": "<strong>Required Permissions</strong>: ViewActivityAudits\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ActivityAuditSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string. If left blank, it will return all activity audits.",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Boolean true or false. Sorts accounts in a descending order if true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "The page index number. The initial page is 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of results per page. The maximum number is 200.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The activity audits were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No activity audits were found"
          }
        },
        "x-requiredPermissions": "ViewActivityAudits"
      }
    },
    "/v1/activityAudit/searchFields": {
      "get": {
        "tags": [
          "Activity Audit"
        ],
        "summary": "Find activity audits from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewActivityAudits\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "ActivityAuditsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search.",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided.",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Boolean true or false. Sorts accounts in a descending order if true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "The page index number. The initial page is 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of results per page. The maximum number is 200.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The activity audits were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No activity audits were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewActivityAudits"
      }
    },
    "/v1/activityAudit/{id}": {
      "get": {
        "tags": [
          "Activity Audit"
        ],
        "summary": "Find an activity audit.",
        "description": "<strong>Required Permissions</strong>: ViewActivityAudits\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ActivityAuditGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the activity audit to be returned.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The activity audit was found and returned",
            "schema": {
              "$ref": "#/definitions/ActivityAudit"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No activity audit was found"
          }
        },
        "x-requiredPermissions": "ViewActivityAudits"
      },
      "put": {
        "tags": [
          "Activity Audit"
        ],
        "summary": "Update an existing activity audit.",
        "description": "<strong>Required Permissions</strong>: EditActivityAudits\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ActivityAuditUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the activity audit to be updated.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ActivityAudit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The activity audit was updated successfully",
            "schema": {
              "$ref": "#/definitions/ActivityAudit"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No activity audit was found"
          },
          "409": {
            "description": "id in path and id in activity audit object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditActivityAudits"
      },
      "delete": {
        "tags": [
          "Activity Audit"
        ],
        "summary": "Delete an activity audit.",
        "description": "<strong>Required Permissions</strong>: DeleteActivityAudits\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ActivityAuditDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the activity audit to be deleted.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The activity audit was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No activity audit was found"
          }
        },
        "x-requiredPermissions": "DeleteActivityAudits"
      }
    },
    "/v1/admin/getProperties": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get all properties in zookeeper.",
        "description": "<strong>Required Permissions</strong>: WZAdminReadConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getProperties",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiListZkFieldValue"
            }
          }
        },
        "x-requiredPermissions": "WZAdminReadConfiguration"
      }
    },
    "/v1/admin/invalidateCache": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Invalidate all caches in the app.",
        "description": "<strong>Required Permissions</strong>: WZAdminUpdateConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "refreshCache",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-requiredPermissions": "WZAdminUpdateConfiguration"
      }
    },
    "/v1/admin/permissions": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieve the list of permissions for the current user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getPermissions",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiListKeyValue"
            }
          }
        }
      }
    },
    "/v1/admin/permissions/{userId}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Retrieve the list of permissions for a particular user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getPermissionsForUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The permissions were found and returned"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No permissions were found"
          }
        }
      }
    },
    "/v1/admin/reloadProperties": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Reload all properties in zookeeper.",
        "description": "<strong>Required Permissions</strong>: WZAdminReadConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "reloadZk",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-requiredPermissions": "WZAdminReadConfiguration"
      }
    },
    "/v1/admin/updateProperties": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update properties in zookeeper.",
        "description": "<strong>Required Permissions</strong>: WZAdminUpdateConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "updateProperties",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ZkProperties"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-requiredPermissions": "WZAdminUpdateConfiguration"
      }
    },
    "/v1/apiKey": {
      "post": {
        "tags": [
          "API Keys"
        ],
        "summary": "Create an API key.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "apiKeyCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The API key was created successfully",
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the account in the system"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/apiKey/search": {
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Find API keys.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "apiKeySearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The API keys were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No API keys were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/apiKey/searchFields": {
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Find API keys from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "apiKeysSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The API keys were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No API keys were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/apiKey/{id}": {
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Retrieve an API key.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "apiKeyGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The API key was found and returned",
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No API key was found"
          }
        },
        "x-requiredPermissions": "Root"
      },
      "put": {
        "tags": [
          "API Keys"
        ],
        "summary": "Update an existing API key.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "apiKeyUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The API key was updated successfully",
            "schema": {
              "$ref": "#/definitions/ApiToken"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No API key was found"
          },
          "409": {
            "description": "id in path and id in API token object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "Root"
      },
      "delete": {
        "tags": [
          "API Keys"
        ],
        "summary": "Delete an API key.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "apiKeyDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The API key was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No API key was found"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/assetDetailConfig": {
      "post": {
        "tags": [
          "Asset Detail Configurations"
        ],
        "summary": "Create an asset detail config.",
        "description": "<strong>Required Permissions</strong>: CreateAssetDetailConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "assetDetailConfigCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AssetDetailConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset detail config was created successfully",
            "schema": {
              "$ref": "#/definitions/AssetDetailConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the asset detail config"
          }
        },
        "x-requiredPermissions": "CreateAssetDetailConfigs"
      }
    },
    "/v1/assetDetailConfig/search": {
      "get": {
        "tags": [
          "Asset Detail Configurations"
        ],
        "summary": "Find asset detail configs.",
        "description": "<strong>Required Permissions</strong>: ViewAssetDetailConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "assetDetailConfigSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset detail configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No asset detail configs were found"
          }
        },
        "x-requiredPermissions": "ViewAssetDetailConfigs"
      }
    },
    "/v1/assetDetailConfig/searchFields": {
      "get": {
        "tags": [
          "Asset Detail Configurations"
        ],
        "summary": "Find asset detail configs from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewAssetDetailConfigs\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "AssetDetailConfigsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset detail configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No asset detail configs were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewAssetDetailConfigs"
      }
    },
    "/v1/assetDetailConfig/{id}": {
      "get": {
        "tags": [
          "Asset Detail Configurations"
        ],
        "summary": "Find an asset detail config.",
        "description": "<strong>Required Permissions</strong>: ViewAssetDetailConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "assetDetailConfigGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset detail config was found and returned",
            "schema": {
              "$ref": "#/definitions/AssetDetailConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No asset detail config was found"
          }
        },
        "x-requiredPermissions": "ViewAssetDetailConfigs"
      },
      "put": {
        "tags": [
          "Asset Detail Configurations"
        ],
        "summary": "Update an existing asset detail config.",
        "description": "<strong>Required Permissions</strong>: EditAssetDetailConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "assetDetailConfigUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AssetDetailConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset detail config was updated successfully",
            "schema": {
              "$ref": "#/definitions/AssetDetailConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No asset detail config was found"
          },
          "409": {
            "description": "id in path and id in asset detail config object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditAssetDetailConfigs"
      },
      "delete": {
        "tags": [
          "Asset Detail Configurations"
        ],
        "summary": "Delete an asset detail config.",
        "description": "<strong>Required Permissions</strong>: DeleteAssetDetailConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "assetDetailConfigDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset detail config was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No asset detail config was found"
          }
        },
        "x-requiredPermissions": "DeleteAssetDetailConfigs"
      }
    },
    "/v1/collection": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a collection.",
        "description": "<strong>Required Permissions</strong>: CreateCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was created successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the collection in the system"
          }
        },
        "x-requiredPermissions": "CreateCollections"
      }
    },
    "/v1/collection/fetchBy": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Fetch collections by access level and optionally contained asset.",
        "description": "<strong>Required Permissions</strong>: ViewCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "Access levels are defined as follows: owner,editor,viewer, editable,all",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "accessLevel",
            "in": "query",
            "description": "Access level",
            "required": true,
            "type": "string",
            "default": "all"
          },
          {
            "name": "containingAssetId",
            "in": "query",
            "description": "Containing asset id",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Collection(s) was(were) found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No collections were found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewCollections"
      }
    },
    "/v1/collection/focused": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Get the user's focused collection.",
        "description": "<strong>Required Permissions</strong>: ViewCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getFocusedCollection",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The collection was found and returned",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No Collection was found"
          }
        },
        "x-requiredPermissions": "ViewCollections"
      }
    },
    "/v1/collection/focused/{id}": {
      "put": {
        "tags": [
          "Collections"
        ],
        "summary": "Set the user's focused collection.",
        "description": "<strong>Required Permissions</strong>: ViewCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "setFocusedCollection",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The focused collection was set",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewCollections"
      }
    },
    "/v1/collection/migration": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a collection.",
        "description": "<strong>Required Permissions</strong>: CreateCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionCreateWithUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was created successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the collection in the system"
          }
        },
        "x-requiredPermissions": "CreateCollections"
      }
    },
    "/v1/collection/search": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Find collections from the system.",
        "description": "<strong>Required Permissions</strong>: ViewCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was found and returned",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "No collection was found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewCollections"
      }
    },
    "/v1/collection/searchFields": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Find Collections from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewCollections\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed seperated by ||.\n\n",
        "operationId": "collectionSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection(s) was(were) found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No collections were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed seperated by ||.",
        "x-requiredPermissions": "ViewCollections"
      }
    },
    "/v1/collection/share": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Share collections with other users.",
        "description": "<strong>Required Permissions</strong>: ShareCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionShare",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ShareInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection(s) was(were) shared"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No collection(s) was(were) found"
          }
        },
        "x-requiredPermissions": "ShareCollections"
      }
    },
    "/v1/collection/userSearch": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Find collections from the system.",
        "description": "<strong>Required Permissions</strong>: ViewCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection(s) was(were) found and returned",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "400": {
            "description": "No collection(s) was(were) found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewCollections"
      }
    },
    "/v1/collection/{id}": {
      "get": {
        "tags": [
          "Collections"
        ],
        "summary": "Find a collection from the system.",
        "description": "<strong>Required Permissions</strong>: ViewCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was found and returned",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No collection was found"
          }
        },
        "x-requiredPermissions": "ViewCollections"
      },
      "put": {
        "tags": [
          "Collections"
        ],
        "summary": "Update an existing collection.",
        "description": "<strong>Required Permissions</strong>: EditCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was updated successfully",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No collection was found"
          },
          "409": {
            "description": "id in path and id in collection object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditCollections"
      },
      "delete": {
        "tags": [
          "Collections"
        ],
        "summary": "Delete a collection from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "collectionDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No collection was found"
          }
        },
        "x-requiredPermissions": "DeleteCollections"
      }
    },
    "/v1/collection/{id}/addAssets": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Add assets to a collection, id options are: \"new\",\"focused\", or the id of an existing collection.",
        "description": "<strong>Required Permissions</strong>: EditCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "addAssets",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name for a new collection (id must be \"new\")",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ApiListCollectionItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No collection was found"
          }
        },
        "x-requiredPermissions": "EditCollections"
      }
    },
    "/v1/collection/{id}/removeAssets": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Remove assets from a collection, id options are:\"focused\", or the id of an existing collection.",
        "description": "<strong>Required Permissions</strong>: EditCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "addAssets",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ApiListUUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection was updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No collection was found"
          }
        },
        "x-requiredPermissions": "EditCollections"
      }
    },
    "/v1/collection/{id}/updateAsset": {
      "put": {
        "tags": [
          "Collections"
        ],
        "summary": "Edit an existing asset in a collection, id options are: \"focused\", or the id of an existing collection.",
        "description": "<strong>Required Permissions</strong>: EditCollections\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "updateAsset",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CollectionItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection item was updated"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No collection item was found"
          }
        },
        "x-requiredPermissions": "EditCollections"
      }
    },
    "/v1/comment/byNestedType/{objectType}/{objectId}/{nestedType}/{nestedId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Find comments for a specific nested object from the system.",
        "description": "<strong>Required Permissions</strong>: ViewComments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getNestedObjectComments",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nestedType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nestedId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comment was found"
          }
        },
        "x-requiredPermissions": "ViewComments"
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Add comments for a specific nested object to the system.",
        "description": "<strong>Required Permissions</strong>: ViewComments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "addNestedObjectComment",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nestedType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "nestedId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was created and returned.",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewComments"
      }
    },
    "/v1/comment/byType/counts/{objectType}/{objectId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get the comment count for a system object.",
        "description": "<strong>Required Permissions</strong>: ViewComments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getObjectComments",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The comments were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comments were found"
          }
        },
        "x-requiredPermissions": "ViewComments"
      }
    },
    "/v1/comment/byType/{objectType}/{objectId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Find comments for a specific object from the system.",
        "description": "<strong>Required Permissions</strong>: ViewComments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getObjectComments",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The comments were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comments were found"
          }
        },
        "x-requiredPermissions": "ViewComments"
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Add a comment for a specific object from the system.",
        "description": "<strong>Required Permissions</strong>: ViewComments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "addObjectComment",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was created and returned",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewComments"
      }
    },
    "/v1/comment/edit/{id}": {
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update an existing comment with specified form encoded values.",
        "description": "<strong>Required Permissions</strong>: EditComments\n\n<strong>Developer Information</strong>: If you are the owner of the comment, the comment will be updated.\n\n",
        "operationId": "commentEdit",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommentEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was updated successfully",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comment was found"
          }
        },
        "x-developerInformation": "If you are the owner of the comment, the comment will be updated.",
        "x-requiredPermissions": "EditComments"
      }
    },
    "/v1/comment/{id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Find a comment from the system.",
        "description": "<strong>Required Permissions</strong>: ViewComments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "commentGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was found and returned",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comment was found"
          }
        },
        "x-requiredPermissions": "ViewComments"
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update an existing comment.  Internal use only.  Needs root privilege.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: If you have root access, the comment will be updated.\n\n",
        "operationId": "commentUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was updated successfully",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comment was found"
          },
          "409": {
            "description": "id in path and id in comment object don't match or Database Integrity Violation"
          }
        },
        "x-developerInformation": "If you have root access, the comment will be updated.",
        "x-requiredPermissions": "Root"
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete a comment from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteComments\n\n<strong>Developer Information</strong>: If you are the creator of the comment or have root access, the comment will be deleted.\n\n",
        "operationId": "commentDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comment was found"
          }
        },
        "x-developerInformation": "If you are the creator of the comment or have root access, the comment will be deleted.",
        "x-requiredPermissions": "DeleteComments"
      }
    },
    "/v1/comment/{id}/hidden/{hidden}": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Hide (or un-hide) the specified comment.",
        "description": "<strong>Required Permissions</strong>: EditComments\n\n<strong>Developer Information</strong>: If you are the owner of the entity to which comment is associated, the comment will be updated.\n\n",
        "operationId": "commentHide",
        "consumes": [
          "application/json",
          "application/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hidden",
            "in": "path",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was updated successfully",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No comment was found"
          },
          "409": {
            "description": "id in path and id in comment object don't match or Database Integrity Violation"
          }
        },
        "x-developerInformation": "If you are the owner of the entity to which comment is associated, the comment will be updated.",
        "x-requiredPermissions": "EditComments"
      }
    },
    "/v1/configuration/common/indexedFields": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Retrieve common indexed fields.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getCommonIndexedFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CommonIndexedFields"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "Root"
      },
      "put": {
        "tags": [
          "Configurations"
        ],
        "summary": "Update common indexed fields.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "updateCommonIndexedFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CommonIndexedFields"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully",
            "schema": {
              "$ref": "#/definitions/CommonIndexedFields"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/configuration/site": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Retrieve a public site configuration by a site name.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "get",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The configuration was found",
            "schema": {
              "$ref": "#/definitions/SiteConfig"
            }
          },
          "404": {
            "description": "No configuration was found"
          }
        }
      },
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Create a new public site configuration.",
        "description": "<strong>Required Permissions</strong>: CreatePublicSiteConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "createPublicSiteConfiguration",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SiteConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The public site configuration created successfully.",
            "schema": {
              "$ref": "#/definitions/SiteConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflicting data"
          }
        },
        "x-requiredPermissions": "CreatePublicSiteConfigs"
      }
    },
    "/v1/configuration/site/search": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Search for public site configurations.",
        "description": "<strong>Required Permissions</strong>: ViewPublicSiteConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "findPublicSiteConfigs",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The search result was returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewPublicSiteConfigs"
      }
    },
    "/v1/configuration/site/searchFields": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Find public site configurations from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewPublicSiteConfigs\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "siteConfigurationSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The site configurations were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No site configurations were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewPublicSiteConfigs"
      }
    },
    "/v1/configuration/site/{id}": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Retrieve a public site configuration.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "get",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The configuration was found",
            "schema": {
              "$ref": "#/definitions/SiteConfig"
            }
          },
          "404": {
            "description": "No configuration was found"
          }
        }
      },
      "put": {
        "tags": [
          "Configurations"
        ],
        "summary": "Update an existing public site configuration.",
        "description": "<strong>Required Permissions</strong>: EditPublicSiteConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "updatePublicSite",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SiteConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The public site configuration was updated successfully",
            "schema": {
              "$ref": "#/definitions/SiteConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No site was found"
          },
          "409": {
            "description": "id in path and id in config object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditPublicSiteConfigs"
      },
      "delete": {
        "tags": [
          "Configurations"
        ],
        "summary": "Delete a site configuration.",
        "description": "<strong>Required Permissions</strong>: DeletePublicSiteConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "deletePublicSite",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The public site configuration was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "DeletePublicSiteConfigs"
      }
    },
    "/v1/deliveryOption": {
      "post": {
        "tags": [
          "DeliveryOptions"
        ],
        "summary": "Create a delivery option.",
        "description": "<strong>Required Permissions</strong>: CreateDeliveryOptions\n\n<strong>Developer Information</strong>: This endpoint creates a delivery option.\n\n",
        "operationId": "deliveryOptionCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeliveryOption"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery option was created successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the delivery option in the system"
          }
        },
        "x-developerInformation": "This endpoint creates a delivery option.",
        "x-requiredPermissions": "CreateDeliveryOptions"
      }
    },
    "/v1/deliveryOption/search": {
      "get": {
        "tags": [
          "DeliveryOptions"
        ],
        "summary": "Find delivery options from the system.",
        "description": "<strong>Required Permissions</strong>: ViewDeliveryOptions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "deliveryOptionSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery options were found and returned",
            "schema": {
              "$ref": "#/definitions/DeliveryOption"
            }
          },
          "400": {
            "description": "No delivery options were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewDeliveryOptions"
      }
    },
    "/v1/deliveryOption/searchFields": {
      "get": {
        "tags": [
          "DeliveryOptions"
        ],
        "summary": "Find delivery options from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewDeliveryOptions\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "deliveryOptionSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery options were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No delivery options were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewDeliveryOptions"
      }
    },
    "/v1/deliveryOption/{id}": {
      "get": {
        "tags": [
          "DeliveryOptions"
        ],
        "summary": "Find a delivery options from the system.",
        "description": "<strong>Required Permissions</strong>: ViewDeliveryOptions\n\n<strong>Developer Information</strong>: This endpoint retrieves a delivery option by id.\n\n",
        "operationId": "deliveryOptionGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery option was found and returned",
            "schema": {
              "$ref": "#/definitions/DeliveryOption"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No delivery option was found"
          }
        },
        "x-developerInformation": "This endpoint retrieves a delivery option by id.",
        "x-requiredPermissions": "ViewDeliveryOptions"
      },
      "put": {
        "tags": [
          "DeliveryOptions"
        ],
        "summary": "Update an existing delivery option.",
        "description": "<strong>Required Permissions</strong>: EditDeliveryOptions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "deliveryOptionUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeliveryOption"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery option was updated successfully",
            "schema": {
              "$ref": "#/definitions/DeliveryOption"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No delivery option was found"
          },
          "409": {
            "description": "id in path and id in delivery option object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditDeliveryOptions"
      },
      "delete": {
        "tags": [
          "DeliveryOptions"
        ],
        "summary": "Delete a delivery option from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteDeliveryOptions\n\n<strong>Developer Information</strong>: This endpoint deletes a delivery configuration by id.\n\n",
        "operationId": "deliveryOptionDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The delivery option was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No delivery option was found"
          }
        },
        "x-developerInformation": "This endpoint deletes a delivery configuration by id.",
        "x-requiredPermissions": "DeleteDeliveryOptions"
      }
    },
    "/v1/document": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Create a document.",
        "description": "<strong>Required Permissions</strong>: CreateDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document was created successfully",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the document"
          }
        },
        "x-requiredPermissions": "CreateDocuments"
      }
    },
    "/v1/document/activeVersion/{documentType}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Find the active version for the specified document type.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getActiveVersionForType",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Language of documents to check",
            "required": false,
            "type": "string",
            "default": "en"
          },
          {
            "name": "siteName",
            "in": "query",
            "description": "Site",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/document/downloadDocumentFile/{documentId}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Download a file.",
        "description": "<strong>Required Permissions</strong>: ViewDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "downloadFile",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "siteName",
            "in": "query",
            "description": "Site",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "ViewDocuments"
      }
    },
    "/v1/document/downloadFile/{fileId}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Download a file.",
        "description": "<strong>Required Permissions</strong>: ViewDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "downloadFile",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "ViewDocuments"
      }
    },
    "/v1/document/name/{name}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Find documents by name.",
        "description": "<strong>Required Permissions</strong>: ViewDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "findDocumentsByName",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewDocuments"
      }
    },
    "/v1/document/search": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Find documents.",
        "description": "<strong>Required Permissions</strong>: ViewDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The documents were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No documents were found"
          }
        },
        "x-requiredPermissions": "ViewDocuments"
      }
    },
    "/v1/document/searchFields": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Find documents from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewDocuments\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "DocumentsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The documents were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No documents were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewDocuments"
      }
    },
    "/v1/document/version/agree": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "User agrees to document.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userAgreesTo",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "documentId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/document/{documentId}/uploadFile": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Upload a file.",
        "description": "<strong>Required Permissions</strong>: ViewDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Version"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "ViewDocuments"
      }
    },
    "/v1/document/{id}": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Find a document.",
        "description": "<strong>Required Permissions</strong>: ViewDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The document was found and returned",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No document was found"
          }
        },
        "x-requiredPermissions": "ViewDocuments"
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Update an existing document.",
        "description": "<strong>Required Permissions</strong>: EditDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Document"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document was updated successfully",
            "schema": {
              "$ref": "#/definitions/Document"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No document was found"
          },
          "409": {
            "description": "id in path and id in Document object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditDocuments"
      },
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Delete a document.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The document was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No document was found"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/documentAgreement": {
      "post": {
        "tags": [
          "Document Agreements"
        ],
        "summary": "Create a DocumentAgreement.",
        "description": "<strong>Required Permissions</strong>: CreateDocuments\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentAgreementCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DocumentAgreement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document agreement was created successfully",
            "schema": {
              "$ref": "#/definitions/DocumentAgreement"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the document agreement"
          }
        },
        "x-requiredPermissions": "CreateDocuments"
      }
    },
    "/v1/documentAgreement/search": {
      "get": {
        "tags": [
          "Document Agreements"
        ],
        "summary": "Find DocumentAgreements.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentAgreementSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The document agreements were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No document agreements were found"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/documentAgreement/searchFields": {
      "get": {
        "tags": [
          "Document Agreements"
        ],
        "summary": "Find DocumentAgreements from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "DocumentAgreementsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The document agreements were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No document agreements were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/documentAgreement/{id}": {
      "get": {
        "tags": [
          "Document Agreements"
        ],
        "summary": "Find a DocumentAgreement.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentAgreementGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The document agreement was found and returned",
            "schema": {
              "$ref": "#/definitions/DocumentAgreement"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No document agreement was found"
          }
        },
        "x-requiredPermissions": "Root"
      },
      "put": {
        "tags": [
          "Document Agreements"
        ],
        "summary": "Update an existing DocumentAgreement.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentAgreementUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DocumentAgreement"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document agreement was updated successfully",
            "schema": {
              "$ref": "#/definitions/DocumentAgreement"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No document agreement was found"
          },
          "409": {
            "description": "id in path and id in DocumentAgreement object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "Root"
      },
      "delete": {
        "tags": [
          "Document Agreements"
        ],
        "summary": "Delete a DocumentAgreement.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "documentAgreementDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The document agreement was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No document agreement was found"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/feeConfig": {
      "post": {
        "tags": [
          "Fee Configuration"
        ],
        "summary": "Create a fee configuration.",
        "description": "<strong>Required Permissions</strong>: CreateFeeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "feeconfigurationCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FeeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The fee configuration was created successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the fee configuration in the system"
          }
        },
        "x-requiredPermissions": "CreateFeeConfigs"
      }
    },
    "/v1/feeConfig/search": {
      "get": {
        "tags": [
          "Fee Configuration"
        ],
        "summary": "Find fee configurations from the system.",
        "description": "<strong>Required Permissions</strong>: ViewFeeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "feeConfigurationSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The fee configurations were found and returned",
            "schema": {
              "$ref": "#/definitions/FeeConfig"
            }
          },
          "400": {
            "description": "No fee congigurations were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewFeeConfigs"
      }
    },
    "/v1/feeConfig/searchFields": {
      "get": {
        "tags": [
          "Fee Configuration"
        ],
        "summary": "Find fee configurations from the system by searchablefields.",
        "description": "<strong>Required Permissions</strong>: ViewFeeConfigs\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "userSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The fee configurations were found and returned",
            "schema": {
              "$ref": "#/definitions/FeeConfig"
            }
          },
          "400": {
            "description": "No fee configurations were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewFeeConfigs"
      }
    },
    "/v1/feeConfig/{id}": {
      "get": {
        "tags": [
          "Fee Configuration"
        ],
        "summary": "Find a fee configuration from the system.",
        "description": "<strong>Required Permissions</strong>: ViewFeeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "feeConfigurationGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The fee configuration was found and returned",
            "schema": {
              "$ref": "#/definitions/FeeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No fee confiaguration was found"
          }
        },
        "x-requiredPermissions": "ViewFeeConfigs"
      },
      "put": {
        "tags": [
          "Fee Configuration"
        ],
        "summary": "Update an existing fee configuration.",
        "description": "<strong>Required Permissions</strong>: EditFeeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "feeConfigurationUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FeeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The fee configuration was updated successfully",
            "schema": {
              "$ref": "#/definitions/FeeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No fee configuration was found"
          },
          "409": {
            "description": "id in path and id in user object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditFeeConfigs"
      },
      "delete": {
        "tags": [
          "Fee Configuration"
        ],
        "summary": "Delete a fee configuration from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteFeeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "feeConfigurationDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The fee configuration was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No fee configuration was found"
          }
        },
        "x-requiredPermissions": "DeleteFeeConfigs"
      }
    },
    "/v1/galleryConfig": {
      "post": {
        "tags": [
          "Gallery Configurations"
        ],
        "summary": "Create a gallery config.",
        "description": "<strong>Required Permissions</strong>: CreateGallery Configs\n\n<strong>Developer Information</strong>: This endpoint creates a gallery configuration.\n\n",
        "operationId": "gallery configCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GalleryConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The gallery config was created successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the gallery config in the system"
          }
        },
        "x-developerInformation": "This endpoint creates a gallery configuration.",
        "x-requiredPermissions": "CreateGallery Configs"
      }
    },
    "/v1/galleryConfig/search": {
      "get": {
        "tags": [
          "Gallery Configurations"
        ],
        "summary": "Find gallery configs from the system.",
        "description": "<strong>Required Permissions</strong>: ViewGalleryConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "galleryConfigSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The gallery configs were found and returned",
            "schema": {
              "$ref": "#/definitions/GalleryConfig"
            }
          },
          "400": {
            "description": "No gallery configs were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewGalleryConfigs"
      }
    },
    "/v1/galleryConfig/searchFields": {
      "get": {
        "tags": [
          "Gallery Configurations"
        ],
        "summary": "Find gallery configs from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewGalleryConfigs\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "galleryConfigSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The gallery configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No gallery configs were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewGalleryConfigs"
      }
    },
    "/v1/galleryConfig/{id}": {
      "get": {
        "tags": [
          "Gallery Configurations"
        ],
        "summary": "Find a gallery config from the system.",
        "description": "<strong>Required Permissions</strong>: ViewGalleryConfigs\n\n<strong>Developer Information</strong>: This endpoint retrieves a gallery configuration by id.\n\n",
        "operationId": "galleryConfigGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The gallery config was found and returned",
            "schema": {
              "$ref": "#/definitions/GalleryConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No gallery config was found"
          }
        },
        "x-developerInformation": "This endpoint retrieves a gallery configuration by id.",
        "x-requiredPermissions": "ViewGalleryConfigs"
      },
      "put": {
        "tags": [
          "Gallery Configurations"
        ],
        "summary": "Update an existing gallery config.",
        "description": "<strong>Required Permissions</strong>: EditGalleryConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "gallery configUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GalleryConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The gallery config was updated successfully",
            "schema": {
              "$ref": "#/definitions/GalleryConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No gallery config was found"
          },
          "409": {
            "description": "id in path and id in gallery config object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditGalleryConfigs"
      },
      "delete": {
        "tags": [
          "Gallery Configurations"
        ],
        "summary": "Delete a gallery config from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteGalleryConfigs\n\n<strong>Developer Information</strong>: This endpoint deletes a gallery configuration by id.\n\n",
        "operationId": "galleryConfigDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The gallery config was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No gallery config was found"
          }
        },
        "x-developerInformation": "This endpoint deletes a gallery configuration by id.",
        "x-requiredPermissions": "DeleteGalleryConfigs"
      }
    },
    "/v1/invalidate": {
      "post": {
        "tags": [
          "Authentication/Authorization"
        ],
        "summary": "Invalidate an authentication token.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: The token in the authorization header will be invalidated. Verify that the token is in the proper text field before invalidating.\n\n",
        "operationId": "invalidateToken",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The token is invalidated and will no longer be valid."
          }
        },
        "x-developerInformation": "The token in the authorization header will be invalidated. Verify that the token is in the proper text field before invalidating."
      }
    },
    "/v1/licenseDocumentConfig": {
      "post": {
        "tags": [
          "License Document Configurations"
        ],
        "summary": "Create a license document configuration.",
        "description": "<strong>Required Permissions</strong>: CreateLicenseDocumentConfigs\n\n<strong>Developer Information</strong>: This endpoint creates a license document configuration. The model defines the combination of reproductionRights and projectTypes that should be iterated over. When the asset id matches a combination, the defined documentType is used.\n\n",
        "operationId": "licenseDocumentcConfigCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LicenseDocumentMatrix"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "THe license document config was created successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the license document config in the system"
          }
        },
        "x-developerInformation": "This endpoint creates a license document configuration. The model defines the combination of reproductionRights and projectTypes that should be iterated over. When the asset id matches a combination, the defined documentType is used.",
        "x-requiredPermissions": "CreateLicenseDocumentConfigs"
      }
    },
    "/v1/licenseDocumentConfig/sample": {
      "get": {
        "tags": [
          "License Document Configurations"
        ],
        "summary": "Get a sample of license document matrix.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "licDocConfigSample",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The license document matrix was found and returned",
            "schema": {
              "$ref": "#/definitions/LicenseDocumentMatrix"
            }
          },
          "400": {
            "description": "No license document matrix were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/licenseDocumentConfig/search": {
      "get": {
        "tags": [
          "License Document Configurations"
        ],
        "summary": "Find License Document Configs from the system.",
        "description": "<strong>Required Permissions</strong>: ViewLicenseDocumentConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "licDocConfigSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The license document configs were found and returned",
            "schema": {
              "$ref": "#/definitions/LicenseDocumentMatrix"
            }
          },
          "400": {
            "description": "No license document configs were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewLicenseDocumentConfigs"
      }
    },
    "/v1/licenseDocumentConfig/{id}": {
      "get": {
        "tags": [
          "License Document Configurations"
        ],
        "summary": "Find a license document config from the system.",
        "description": "<strong>Required Permissions</strong>: ViewLicenseDocumentConfigs\n\n<strong>Developer Information</strong>: This endpoint retrieves a license document configuration by id.\n\n",
        "operationId": "licDocConfigGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The license document config was found and returned",
            "schema": {
              "$ref": "#/definitions/LicenseDocumentMatrix"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No license document config was found"
          }
        },
        "x-developerInformation": "This endpoint retrieves a license document configuration by id.",
        "x-requiredPermissions": "ViewLicenseDocumentConfigs"
      },
      "put": {
        "tags": [
          "License Document Configurations"
        ],
        "summary": "Update an existing license document config.",
        "description": "<strong>Required Permissions</strong>: EditLicense Document Configs\n\n<strong>Developer Information</strong>: This endpoint edits a license document configuration by id.\n\n",
        "operationId": "licenseDocumentConfigUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LicenseDocumentMatrix"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The license document config was updated successfully",
            "schema": {
              "$ref": "#/definitions/LicenseDocumentMatrix"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No license document config was found"
          },
          "409": {
            "description": "id in path and id in license document config object don't match or Database Integrity Violation"
          }
        },
        "x-developerInformation": "This endpoint edits a license document configuration by id.",
        "x-requiredPermissions": "EditLicense Document Configs"
      },
      "delete": {
        "tags": [
          "License Document Configurations"
        ],
        "summary": "Delete a license document config from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteLicenseDocumentConfigs\n\n<strong>Developer Information</strong>: This endpoint deletes a license document configuration by id.\n\n",
        "operationId": "licDocConfigDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The license document config was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No license document config was found"
          }
        },
        "x-developerInformation": "This endpoint deletes a license document configuration by id.",
        "x-requiredPermissions": "DeleteLicenseDocumentConfigs"
      }
    },
    "/v1/login": {
      "post": {
        "tags": [
          "Authentication/Authorization"
        ],
        "summary": "Authenticate the user's credentials and return the authentication token if successful.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: Click on the Model Schema to copy into body text box. Then, replace string entity in the model schema with actual userId, password, and siteName.\n\n",
        "operationId": "login",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LoginInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication was successful. Authentication token was returned",
            "schema": {
              "$ref": "#/definitions/UserSession"
            }
          },
          "401": {
            "description": "Unable to authorize the user credentials"
          }
        },
        "x-developerInformation": "Click on the Model Schema to copy into body text box. Then, replace string entity in the model schema with actual userId, password, and siteName."
      }
    },
    "/v1/logout": {
      "post": {
        "tags": [
          "Authentication/Authorization"
        ],
        "summary": "Log the user out. Invalidate the token that is in the authorization header.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: Verify that the token is in the proper text box at the top of the page before resuming.\n\n",
        "operationId": "invalidateToken",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout was successful"
          },
          "401": {
            "description": "User is not currently logged in. The token that was passed is invalid"
          }
        },
        "x-developerInformation": "Verify that the token is in the proper text box at the top of the page before resuming."
      }
    },
    "/v1/payeeConfig": {
      "post": {
        "tags": [
          "PayeeConfigs"
        ],
        "summary": "Create a payee config.",
        "description": "<strong>Required Permissions</strong>: CreatePayeeConfigs\n\n<strong>Developer Information</strong>: This endpoint creates a payee config.\n\n",
        "operationId": "PayeeConfigCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayeeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payee config was created successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the payee config in the system"
          }
        },
        "x-developerInformation": "This endpoint creates a payee config.",
        "x-requiredPermissions": "CreatePayeeConfigs"
      }
    },
    "/v1/payeeConfig/search": {
      "get": {
        "tags": [
          "PayeeConfigs"
        ],
        "summary": "Find payee config from the system.",
        "description": "<strong>Required Permissions</strong>: ViewPayeeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "PayeeConfigSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The payee configs were found and returned",
            "schema": {
              "$ref": "#/definitions/PayeeConfig"
            }
          },
          "400": {
            "description": "No payee configs were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewPayeeConfigs"
      }
    },
    "/v1/payeeConfig/searchFields": {
      "get": {
        "tags": [
          "PayeeConfigs"
        ],
        "summary": "Find payee configs from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewPayeeConfigs\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "PayeeConfigSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The payee configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No payee configs were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewPayeeConfigs"
      }
    },
    "/v1/payeeConfig/{id}": {
      "get": {
        "tags": [
          "PayeeConfigs"
        ],
        "summary": "Find a payee config from the system.",
        "description": "<strong>Required Permissions</strong>: ViewPayeeConfigs\n\n<strong>Developer Information</strong>: This endpoint retrieves a payee config by id.\n\n",
        "operationId": "PayeeConfigGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The payee config was found and returned",
            "schema": {
              "$ref": "#/definitions/PayeeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No payee config was found"
          }
        },
        "x-developerInformation": "This endpoint retrieves a payee config by id.",
        "x-requiredPermissions": "ViewPayeeConfigs"
      },
      "put": {
        "tags": [
          "PayeeConfigs"
        ],
        "summary": "Update an existing payee config.",
        "description": "<strong>Required Permissions</strong>: EditPayeeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "PayeeConfigUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayeeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payee config was updated successfully",
            "schema": {
              "$ref": "#/definitions/PayeeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No payee config was found"
          },
          "409": {
            "description": "id in path and id in payee config object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditPayeeConfigs"
      },
      "delete": {
        "tags": [
          "PayeeConfigs"
        ],
        "summary": "Delete a payee config from the system.",
        "description": "<strong>Required Permissions</strong>: DeletePayeeConfigs\n\n<strong>Developer Information</strong>: This endpoint deletes a payee configuration by id.\n\n",
        "operationId": "PayeeConfigDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The payee config was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No payee config was found"
          }
        },
        "x-developerInformation": "This endpoint deletes a payee configuration by id.",
        "x-requiredPermissions": "DeletePayeeConfigs"
      }
    },
    "/v1/registrationEmail": {
      "post": {
        "tags": [
          "Registration Email List"
        ],
        "summary": "Create a registration email list.",
        "description": "<strong>Required Permissions</strong>: CreateRegistrationEmailLists\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "RegistrationEmailListCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RegistrationEmailList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The registration email list was created successfully",
            "schema": {
              "$ref": "#/definitions/RegistrationEmailList"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the registration email list"
          }
        },
        "x-requiredPermissions": "CreateRegistrationEmailLists"
      }
    },
    "/v1/registrationEmail/search": {
      "get": {
        "tags": [
          "Registration Email List"
        ],
        "summary": "Find registration email lists.",
        "description": "<strong>Required Permissions</strong>: ViewRegistrationEmailLists\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "RegistrationEmailListSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The registration email lists were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No registration email lists were found"
          }
        },
        "x-requiredPermissions": "ViewRegistrationEmailLists"
      }
    },
    "/v1/registrationEmail/searchFields": {
      "get": {
        "tags": [
          "Registration Email List"
        ],
        "summary": "Find registration email lists from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewRegistrationEmailLists\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "RegistrationEmailListsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The registration email lists were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No registration email lists were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewRegistrationEmailLists"
      }
    },
    "/v1/registrationEmail/updateList": {
      "put": {
        "tags": [
          "Registration Email List"
        ],
        "summary": "Update a registration email list.",
        "description": "<strong>Required Permissions</strong>: EditRegistrationEmailLists\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "RegistrationEmailListUpdatePartial",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comma separated list of email addresses",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultRole",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "defaultAccount",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The registration email list was updated successfully",
            "schema": {
              "$ref": "#/definitions/RegistrationEmailList"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No registration email list was found"
          }
        },
        "x-requiredPermissions": "EditRegistrationEmailLists"
      }
    },
    "/v1/registrationEmail/{id}": {
      "get": {
        "tags": [
          "Registration Email List"
        ],
        "summary": "Find a registration email list.",
        "description": "<strong>Required Permissions</strong>: ViewRegistrationEmailLists\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "RegistrationEmailListGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The registration email list was found and returned",
            "schema": {
              "$ref": "#/definitions/RegistrationEmailList"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No registration email list was found"
          }
        },
        "x-requiredPermissions": "ViewRegistrationEmailLists"
      },
      "put": {
        "tags": [
          "Registration Email List"
        ],
        "summary": "Update an existing registration email list.",
        "description": "<strong>Required Permissions</strong>: EditRegistrationEmailLists\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "RegistrationEmailListUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RegistrationEmailList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The registration email list was updated successfully",
            "schema": {
              "$ref": "#/definitions/RegistrationEmailList"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No registration email list was found"
          },
          "409": {
            "description": "id in path and id in registration email list object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditRegistrationEmailLists"
      },
      "delete": {
        "tags": [
          "Registration Email List"
        ],
        "summary": "Delete a registration email list.",
        "description": "<strong>Required Permissions</strong>: DeleteRegistrationEmailLists\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "RegistrationEmailListDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The registration email list was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No registration email list was found"
          }
        },
        "x-requiredPermissions": "DeleteRegistrationEmailLists"
      }
    },
    "/v1/renditionTypeConfig": {
      "post": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Create an edit rendition type config.",
        "description": "<strong>Required Permissions</strong>: EditRenditionTypeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "rtcCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The rendition type config was created successfully",
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the rendition type config"
          }
        },
        "x-requiredPermissions": "EditRenditionTypeConfigs"
      }
    },
    "/v1/renditionTypeConfig/default": {
      "get": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Get the default rendition type config.",
        "description": "<strong>Required Permissions</strong>: ViewRenditionTypeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getDefault",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The default rendition type configuration was returned",
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewRenditionTypeConfigs"
      }
    },
    "/v1/renditionTypeConfig/search": {
      "get": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Find rendition type configs.",
        "description": "<strong>Required Permissions</strong>: ViewRenditionTypeConfig\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "rtcSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The rendition type configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No rendition type configs were found"
          }
        },
        "x-requiredPermissions": "ViewRenditionTypeConfig"
      }
    },
    "/v1/renditionTypeConfig/searchFields": {
      "get": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Find rendition type configs from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewRenditionTypeConfig\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "RenditionTypeConfigsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The rendition type configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No rendition type configs were found"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewRenditionTypeConfig"
      }
    },
    "/v1/renditionTypeConfig/siteConfig": {
      "get": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Find the rendition type config for the site. The default config will be returned if none is set on the site.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getSite",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The rendition type configs were found and returned",
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/renditionTypeConfig/userConfig": {
      "get": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Find the rendition type config that is specific to the user who is making the call. RenditionTypeConfig can be set at Site/Account/User level. If it is not set on any of those entities, the default config will be returned.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getRenditionTypeConfig",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The rendition type configs were found and returned",
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/renditionTypeConfig/{id}": {
      "get": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Find a rendition type config.",
        "description": "<strong>Required Permissions</strong>: ViewRenditionTypeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "rtcGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The rendition type config was found and returned",
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No rendition type config was found"
          }
        },
        "x-requiredPermissions": "ViewRenditionTypeConfigs"
      },
      "put": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Update an existing rendition type config.",
        "description": "<strong>Required Permissions</strong>: EditRenditionTypeConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "rtcUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The rendition type config was updated successfully",
            "schema": {
              "$ref": "#/definitions/RenditionTypeConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No rendition type config was found"
          },
          "409": {
            "description": "id in path and id in Account object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditRenditionTypeConfigs"
      },
      "delete": {
        "tags": [
          "Rendition Type Configurations"
        ],
        "summary": "Delete a rendition type config.",
        "description": "<strong>Required Permissions</strong>: DeleteRenditionTypeConfig\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "rtcDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The rendition type config was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No rendition type config was found"
          }
        },
        "x-requiredPermissions": "DeleteRenditionTypeConfig"
      }
    },
    "/v1/scriptConfig": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Create a script configuration.",
        "description": "<strong>Required Permissions</strong>: WZAdminUpdateConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ScriptConfigurationCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScriptConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The script configuration was created successfully",
            "schema": {
              "$ref": "#/definitions/ScriptConfiguration"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the script configuration"
          }
        },
        "x-requiredPermissions": "WZAdminUpdateConfiguration"
      }
    },
    "/v1/scriptConfig/search": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Find script configurations.",
        "description": "<strong>Required Permissions</strong>: WZAdminReadConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ScriptConfigurationSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string. If left blank, it will return all script configs.",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Boolean true or false. Sorts script configs in a descending order if true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "The page index number. The initial page is 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of results per page. The maximum number is 200.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The script configurations were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No script configurations were found"
          }
        },
        "x-requiredPermissions": "WZAdminReadConfiguration"
      }
    },
    "/v1/scriptConfig/searchFields": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Find script configurations from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: WZAdminReadConfiguration\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "ScriptConfigurationsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search.",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided.",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Boolean true or false. Sorts script configs in a descending order if true.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "The page index number. The initial page is 0.",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of results per page. The maximum number is 200.",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The script configurations were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No script configurations were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "WZAdminReadConfiguration"
      }
    },
    "/v1/scriptConfig/{id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Find a script configuration.",
        "description": "<strong>Required Permissions</strong>: WZAdminReadConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ScriptConfigurationGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the script configuration to be returned.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The script configuration was found and returned",
            "schema": {
              "$ref": "#/definitions/ScriptConfiguration"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No script configuration was found"
          }
        },
        "x-requiredPermissions": "WZAdminReadConfiguration"
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update an existing script configuration.",
        "description": "<strong>Required Permissions</strong>: WZAdminUpdateConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ScriptConfigurationUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScriptConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The script configuration was updated successfully",
            "schema": {
              "$ref": "#/definitions/ScriptConfiguration"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No script configuration was found"
          },
          "409": {
            "description": "id in path and id in script configuration object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "WZAdminUpdateConfiguration"
      },
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete a script configuration.",
        "description": "<strong>Required Permissions</strong>: WZAdminUpdateConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "ScriptConfigurationDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The script configuration was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No script configuration was found"
          }
        },
        "x-requiredPermissions": "WZAdminUpdateConfiguration"
      }
    },
    "/v1/searchFilter": {
      "post": {
        "tags": [
          "Search Filters"
        ],
        "summary": "Create a search filter.",
        "description": "<strong>Required Permissions</strong>: CreateSearchFilters\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "filterCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search filter was created successfully",
            "schema": {
              "$ref": "#/definitions/SearchFilter"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the search filter"
          }
        },
        "x-requiredPermissions": "CreateSearchFilters"
      }
    },
    "/v1/searchFilter/csv": {
      "post": {
        "tags": [
          "Search Filters"
        ],
        "summary": "Create filters from a csv file. This is to support the existing filters in legacy system. CSV must be in the format exported by lagacy system.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "cvsCreate",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "description": "The site name that contains these filters",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search filter was created successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the search filter"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/searchFilter/search": {
      "get": {
        "tags": [
          "Search Filters"
        ],
        "summary": "Find search filters.",
        "description": "<strong>Required Permissions</strong>: ViewSearchFilters\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "filterSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The search filters were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No search filters were found"
          }
        },
        "x-requiredPermissions": "ViewSearchFilters"
      }
    },
    "/v1/searchFilter/searchFields": {
      "get": {
        "tags": [
          "Search Filters"
        ],
        "summary": "Find filters from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewSearchFilters\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "FilterSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The filters were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No filters were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewSearchFilters"
      }
    },
    "/v1/searchFilter/{id}": {
      "get": {
        "tags": [
          "Search Filters"
        ],
        "summary": "Find a search filter.",
        "description": "<strong>Required Permissions</strong>: ViewSearchFilters\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "filterGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The search filter was found and returned",
            "schema": {
              "$ref": "#/definitions/SearchFilter"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No search filter was found"
          }
        },
        "x-requiredPermissions": "ViewSearchFilters"
      },
      "put": {
        "tags": [
          "Search Filters"
        ],
        "summary": "Update an existing search filter.",
        "description": "<strong>Required Permissions</strong>: EditSearchFilters\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "filterUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search filter was updated successfully",
            "schema": {
              "$ref": "#/definitions/SearchFilter"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No search filter was found"
          },
          "409": {
            "description": "id in path and id in search filter object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditSearchFilters"
      },
      "delete": {
        "tags": [
          "Search Filters"
        ],
        "summary": "Delete a search filter.",
        "description": "<strong>Required Permissions</strong>: DeleteSearchFilters\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "filterDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The search filter was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No search filter was found"
          }
        },
        "x-requiredPermissions": "DeleteSearchFilters"
      }
    },
    "/v1/site": {
      "post": {
        "tags": [
          "Sites"
        ],
        "summary": "Create a site.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "siteCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Site"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The site was created successfully",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "description": "Database Integrity Violation"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unable to create the site"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/site/byName/{name}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Retrieve a site by name.",
        "description": "<strong>Required Permissions</strong>: ViewMySite\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "siteGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The site was found and returned",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No site was found"
          }
        },
        "x-requiredPermissions": "ViewMySite"
      }
    },
    "/v1/site/indexedFields": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Retrieve indexed fields for a site.",
        "description": "<strong>Required Permissions</strong>: ViewMySite\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "siteIndexedFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The viewable site's indexed fields were found and returned",
            "schema": {
              "$ref": "#/definitions/SiteViewableIndexedFields"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No indexed fields were found"
          }
        },
        "x-requiredPermissions": "ViewMySite"
      }
    },
    "/v1/site/search": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Find sites.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "siteSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The sites were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "No sites were found"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/site/searchFields": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Find sites from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "SitesSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The sites were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No sites were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/site/{id}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Retrieve a site.",
        "description": "<strong>Required Permissions</strong>: ViewMySite\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "siteGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The site was found and returned",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No site was found"
          }
        },
        "x-requiredPermissions": "ViewMySite"
      },
      "put": {
        "tags": [
          "Sites"
        ],
        "summary": "Update an existing site.",
        "description": "<strong>Required Permissions</strong>: EditMySite\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "siteUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Site"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The site was updated successfully",
            "schema": {
              "$ref": "#/definitions/Site"
            }
          },
          "400": {
            "description": "id in path and id in site object don't match or Database Integrity Violation"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No site was found"
          }
        },
        "x-requiredPermissions": "EditMySite"
      },
      "delete": {
        "tags": [
          "Sites"
        ],
        "summary": "Delete a site from the system.",
        "description": "<strong>Required Permissions</strong>: Root\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "siteDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The site was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No site was found"
          }
        },
        "x-requiredPermissions": "Root"
      }
    },
    "/v1/sortDefinition/list": {
      "get": {
        "tags": [
          "Sort Definitions"
        ],
        "summary": "Find sort definitions associated with the current user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getAssociatedSorts",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The sort definitions were found and returned",
            "schema": {
              "$ref": "#/definitions/ApiList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No sort definitions were found"
          }
        }
      }
    },
    "/v1/sortDefinition/{id}": {
      "get": {
        "tags": [
          "Sort Definitions"
        ],
        "summary": "Find a sort definition from the system.",
        "description": "<strong>Required Permissions</strong>: ViewSortDefinitions\n\n<strong>Developer Information</strong>: This is used to fetch sort definitions from the database by id.\n\n<strong>Example</strong>: {<br />\"siteName\": \"core\",<br />\"language\": \"en\",<br />\"accountId\": 1,<br /> \"name\": \"English Core Translation\",<br /> \"text\": \"{<br /> \\\"welcome\\\" : \\\"Hello there!\\\",<br /> \\\"download_master\\\" : \\\"Download Master\\\"<br />}\" <br />}",
        "operationId": "SortDefinitionGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The sort definition was found and returned",
            "schema": {
              "$ref": "#/definitions/SortDefinition"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No sort definition was found"
          }
        },
        "x-developerInformation": "This is used to fetch sort definitions from the database by id.",
        "x-example": "{'siteName': 'core','language': 'en','accountId': 1, 'name': 'English Core Translation', 'text': '{ \\\"welcome\\\" : \\\"Hello there!\\\", \\\"download_master\\\" : \\\"Download Master\\\"}' }",
        "x-requiredPermissions": "ViewSortDefinitions"
      },
      "put": {
        "tags": [
          "Sort Definitions"
        ],
        "summary": "Update an existing sort definition.",
        "description": "<strong>Required Permissions</strong>: EditSortDefinitions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "sortDefinitionUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SortDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sort definition was updated successfully",
            "schema": {
              "$ref": "#/definitions/SortDefinition"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No sort definition was found"
          },
          "409": {
            "description": "id in path and id in sort definition object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditSortDefinitions"
      },
      "delete": {
        "tags": [
          "Sort Definitions"
        ],
        "summary": "Delete a sort defintion from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteSortDefinitions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "sortDefinitionDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The sort definition was deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No sort definition was found"
          }
        },
        "x-requiredPermissions": "DeleteSortDefinitions"
      }
    },
    "/v1/sortDefinition/{type}/{id}": {
      "get": {
        "tags": [
          "Sort Definitions"
        ],
        "summary": "Find sort definitions associated with a specific object.",
        "description": "<strong>Required Permissions</strong>: ViewSortDefinitions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getSortsForObject",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The sort definitions were found and returned",
            "schema": {
              "$ref": "#/definitions/ApiList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No sort definitions were found"
          }
        },
        "x-requiredPermissions": "ViewSortDefinitions"
      },
      "post": {
        "tags": [
          "Sort Definitions"
        ],
        "summary": "Add a sort definition for a specific object from the system.",
        "description": "<strong>Required Permissions</strong>: CreateSortDefinitions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "addSortDefinition",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SortDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sort definition was added",
            "schema": {
              "$ref": "#/definitions/SortDefinition"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No sort definition was found"
          }
        },
        "x-requiredPermissions": "CreateSortDefinitions"
      }
    },
    "/v1/token": {
      "post": {
        "tags": [
          "Authentication/Authorization"
        ],
        "summary": "Authenticate user's credentials and return the authentication token if successful.",
        "description": "<strong>Required Permissions</strong>: The credentials that need to be validated in this endpoint is username/email address, password, and siteName.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "handleTokenRequest",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "formData",
            "description": "The credentials must be authenticated in the application/x-www-form-urlencoded form:<br>client_id=[username or email address]<br>client_secret=[user password]<br>grant_type=client_credentials<br>siteName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication was successful. Authentication token was returned.",
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "description": "Unable to authorize the user credentials"
          }
        },
        "x-requiredPermissions": "The credentials that need to be validated in this endpoint is username/email address, password, and siteName."
      }
    },
    "/v1/transcodeTargetConfig": {
      "post": {
        "tags": [
          "Transcode Target Configurations"
        ],
        "summary": "Create a transcode target config.",
        "description": "<strong>Required Permissions</strong>: CreateTranscodeTargetConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n<strong>Example</strong>: {<br />\"id\": 1,<br /> \"siteName\": \"core\",<br /> \"transcodeTargetMap\": {<br /> \"1080i\": [ \"1080i\",<br /> \"prores_422_1080p24\" ],<br /> \"1080p\": [ \"1080i\" ] <br />} ",
        "operationId": "TranscodeTargetConfigCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TranscodeTargetConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The transcode target config was created successfully",
            "schema": {
              "$ref": "#/definitions/TranscodeTargetConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the transcode target config"
          }
        },
        "x-example": "{'id': 1, 'siteName': 'core', 'transcodeTargetMap': { '1080i': [ '1080i', 'prores_422_1080p24' ], '1080p': [ '1080i' ] } ",
        "x-requiredPermissions": "CreateTranscodeTargetConfigs"
      }
    },
    "/v1/transcodeTargetConfig/search": {
      "get": {
        "tags": [
          "Transcode Target Configurations"
        ],
        "summary": "Find transcode target configs.",
        "description": "<strong>Required Permissions</strong>: ViewTranscodeTargetConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "TranscodeTargetConfigSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The transcode target configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No transcode target configs were found"
          }
        },
        "x-requiredPermissions": "ViewTranscodeTargetConfigs"
      }
    },
    "/v1/transcodeTargetConfig/searchFields": {
      "get": {
        "tags": [
          "Transcode Target Configurations"
        ],
        "summary": "Find transcode target configs from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewTranscodeTargetConfigs\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "TranscodeTargetConfigsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The transcode target configs were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No transcode target configs were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewTranscodeTargetConfigs"
      }
    },
    "/v1/transcodeTargetConfig/{id}": {
      "get": {
        "tags": [
          "Transcode Target Configurations"
        ],
        "summary": "Find a transcode target config.",
        "description": "<strong>Required Permissions</strong>: ViewTranscodeTargetConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "TranscodeTargetConfigGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The transcode target config was found and returned",
            "schema": {
              "$ref": "#/definitions/TranscodeTargetConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No transcode target config was found"
          }
        },
        "x-requiredPermissions": "ViewTranscodeTargetConfigs"
      },
      "put": {
        "tags": [
          "Transcode Target Configurations"
        ],
        "summary": "Update an existing transcode target config.",
        "description": "<strong>Required Permissions</strong>: EditTranscodeTargetConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n<strong>Example</strong>: {<br />\"id\": 1,<br /> \"siteName\": \"core\",<br /> \"transcodeTargetMap\": {<br /> \"1080i\": [ \"1080i\",<br /> \"prores_422_1080p24\" ],<br /> \"1080p\": [ \"1080i\" ] <br />} ",
        "operationId": "TranscodeTargetConfigUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TranscodeTargetConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The transcode target config was updated successfully",
            "schema": {
              "$ref": "#/definitions/TranscodeTargetConfig"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No transcode target config was found"
          },
          "409": {
            "description": "id in path and id in transcode target config object don't match or Database Integrity Violation"
          }
        },
        "x-example": "{'id': 1, 'siteName': 'core', 'transcodeTargetMap': { '1080i': [ '1080i', 'prores_422_1080p24' ], '1080p': [ '1080i' ] } ",
        "x-requiredPermissions": "EditTranscodeTargetConfigs"
      },
      "delete": {
        "tags": [
          "Transcode Target Configurations"
        ],
        "summary": "Delete a transcode target config.",
        "description": "<strong>Required Permissions</strong>: DeleteTranscodeTargetConfigs\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "TranscodeTargetConfigDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The transcode target config was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No transcode target config was found"
          }
        },
        "x-requiredPermissions": "DeleteTranscodeTargetConfigs"
      }
    },
    "/v1/translation": {
      "post": {
        "tags": [
          "Translations"
        ],
        "summary": "Create a translation.",
        "description": "<strong>Required Permissions</strong>: CreateTranslations\n\n<strong>Developer Information</strong>: This endpoint creates a translation specific to a site and language. The JSON object containing all the translations is stored as a string and therefore must have escaped quotes when the translation object is created. You can use a tool like http://bernhardhaeussner.de/odd/json-escape/ to test this method via Swagger.\n\n<strong>Example</strong>: {<br />\"siteName\": \"core\",<br />\"language\": \"en\",<br />\"accountId\": 1,<br /> \"name\": \"English Core Translation\",<br /> \"text\": \"{<br /> \\\"welcome\\\" : \\\"Hello there!\\\",<br /> \\\"download_master\\\" : \\\"Download Master\\\"<br />}\" <br />}",
        "operationId": "TranslationCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Translation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The translation was created successfully",
            "schema": {
              "$ref": "#/definitions/Translation"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the translation"
          }
        },
        "x-developerInformation": "This endpoint creates a translation specific to a site and language. The JSON object containing all the translations is stored as a string and therefore must have escaped quotes when the translation object is created. You can use a tool like http://bernhardhaeussner.de/odd/json-escape/ to test this method via Swagger.",
        "x-example": "{'siteName': 'core','language': 'en','accountId': 1, 'name': 'English Core Translation', 'text': '{ \\\"welcome\\\" : \\\"Hello there!\\\", \\\"download_master\\\" : \\\"Download Master\\\"}' }",
        "x-requiredPermissions": "CreateTranslations"
      }
    },
    "/v1/translation/search": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "Find translations.",
        "description": "<strong>Required Permissions</strong>: ViewTranslations\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "TranslationSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The translations were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No translations were found"
          }
        },
        "x-requiredPermissions": "ViewTranslations"
      }
    },
    "/v1/translation/searchFields": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "Find translations from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewTranslations\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "TranslationsSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The translations were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No translations were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewTranslations"
      }
    },
    "/v1/translation/{id}": {
      "put": {
        "tags": [
          "Translations"
        ],
        "summary": "Update an existing translation.",
        "description": "<strong>Required Permissions</strong>: EditTranslations\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n<strong>Example</strong>: {<br />\"id\": 13,<br /> \"siteName\": \"core\",<br /> \"language\": \"en\",<br /> \"accountId\": 1,<br /> \"name\": \"English Core Translation\",<br /> \"text\": \"{<br /> \\\"welcome\\\" : \\\"Hello there!\\\",<br /> \\\"download_master\\\" : \\\"Download Master\\\"<br />}\" <br />}",
        "operationId": "TranslationUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Translation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The translation was updated successfully",
            "schema": {
              "$ref": "#/definitions/Translation"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No translation was found"
          },
          "409": {
            "description": "id in path and id in translation object don't match or Database Integrity Violation"
          }
        },
        "x-example": "{'id': 13, 'siteName': 'core', 'language': 'en', 'accountId': 1, 'name': 'English Core Translation', 'text': '{ \\\"welcome\\\" : \\\"Hello there!\\\", \\\"download_master\\\" : \\\"Download Master\\\"}' }",
        "x-requiredPermissions": "EditTranslations"
      },
      "delete": {
        "tags": [
          "Translations"
        ],
        "summary": "Delete a translation.",
        "description": "<strong>Required Permissions</strong>: DeleteTranslations\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "TranslationDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The translation was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No translation was found"
          }
        },
        "x-requiredPermissions": "DeleteTranslations"
      }
    },
    "/v1/translation/{language}.json": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "Find a translation.",
        "description": "<strong>Required Permissions</strong>: ViewTranslations\n\n<strong>Developer Information</strong>: This endpoint fetches all translations for a particular site and language. The JSON object containing all the translations is stored as a string and will be returned to you as a string.\n\n<strong>Example</strong>: en",
        "operationId": "TranslationGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The translation was found and returned",
            "schema": {
              "$ref": "#/definitions/Translation"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No translation was found"
          }
        },
        "x-developerInformation": "This endpoint fetches all translations for a particular site and language. The JSON object containing all the translations is stored as a string and will be returned to you as a string.",
        "x-example": "en",
        "x-requiredPermissions": "ViewTranslations"
      }
    },
    "/v1/translation/{siteName}/{language}.json": {
      "get": {
        "tags": [
          "Translations"
        ],
        "summary": "Find a translation.",
        "description": "<strong>Required Permissions</strong>: ViewTranslations\n\n<strong>Developer Information</strong>: This endpoint fetches all translations for a particular site and language. The JSON object containing all the translations is stored as a string and will be returned to you as a string.\n\n",
        "operationId": "get",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The translation was found and returned",
            "schema": {
              "$ref": "#/definitions/Translation"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No translation was found"
          }
        },
        "x-developerInformation": "This endpoint fetches all translations for a particular site and language. The JSON object containing all the translations is stored as a string and will be returned to you as a string.",
        "x-requiredPermissions": "ViewTranslations"
      }
    },
    "/v1/user": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user.",
        "description": "<strong>Required Permissions</strong>: CreateUsers\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was created successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Database Integrity Violation"
          },
          "500": {
            "description": "Unable to create the user in the system"
          }
        },
        "x-requiredPermissions": "CreateUsers"
      }
    },
    "/v1/user/activateUser": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Activate a user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userActivate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "activationCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been activated."
          },
          "202": {
            "description": "Activation is accepted and redirected to login page"
          },
          "400": {
            "description": "The user activation code is no longer valid."
          }
        }
      }
    },
    "/v1/user/bulkUpdateUsersAccounts": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update multiple users' associated account.",
        "description": "<strong>Required Permissions</strong>: BulkUpdateAccountForUsers\n\n<strong>Developer Information</strong>: This endpoint takes one role id and multiple user ids. It will iterate over the users, remove any existing roles or permissions and replace it with the role given\n\n",
        "operationId": "userAccountUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkUpdateAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users' roles were successfully updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          },
          "409": {
            "description": "id in path and id in user object don't match or Database Integrity Violation"
          }
        },
        "x-developerInformation": "This endpoint takes one role id and multiple user ids. It will iterate over the users, remove any existing roles or permissions and replace it with the role given",
        "x-requiredPermissions": "BulkUpdateAccountForUsers"
      }
    },
    "/v1/user/bulkUpdateUsersRole": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update multiple users' role.",
        "description": "<strong>Required Permissions</strong>: BulkUpdateRolesForUsers\n\n<strong>Developer Information</strong>: This endpoint takes one role id and multiple user ids. It will iterate over the users, remove any existing roles or permissions and replace it with the role given.\n\n",
        "operationId": "userRoleUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BulkUpdateRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users' roles were successfully updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          },
          "409": {
            "description": "id in path and id in user object don't match or Database Integrity Violation"
          }
        },
        "x-developerInformation": "This endpoint takes one role id and multiple user ids. It will iterate over the users, remove any existing roles or permissions and replace it with the role given.",
        "x-requiredPermissions": "BulkUpdateRolesForUsers"
      }
    },
    "/v1/user/byIds": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of users.",
        "description": "<strong>Required Permissions</strong>: ViewUsers\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userList",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma Separated list of ids to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The users were found and returned",
            "schema": {
              "$ref": "#/definitions/ApiList"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No users were found"
          }
        },
        "x-requiredPermissions": "ViewUsers"
      }
    },
    "/v1/user/changePassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Change a password.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: This endpoint is used by a logged in user. The body must include newPassword field, and the oldPassword must be reentered.\n\n",
        "operationId": "changePassword",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChangePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The password has been reset",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "401": {
            "description": "Incorrect (old) password supplied"
          }
        },
        "x-developerInformation": "This endpoint is used by a logged in user. The body must include newPassword field, and the oldPassword must be reentered."
      }
    },
    "/v1/user/currentUser": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user information. This method examines the header to retrieve the user's token. It only works if the authorization is passed in the header.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: Current user is the user who is affilicated with the authorization header token.\n\n",
        "operationId": "userCurrentGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The user information was returned successfully",
            "schema": {
              "$ref": "#/definitions/UserPrincipal"
            }
          },
          "401": {
            "description": "Not authorized to retrieve current user information. Authorization token may not be valid."
          }
        },
        "x-developerInformation": "Current user is the user who is affilicated with the authorization header token."
      }
    },
    "/v1/user/currentUsersAssociatedAddresses": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find a user from the system.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The user was found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          }
        }
      }
    },
    "/v1/user/galleryViewHierarchy/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve gallery view hierarchy for a specific user.",
        "description": "<strong>Required Permissions</strong>: ViewUserGalleryConfigHierarchy\n\n<strong>Developer Information</strong>: This endpoint will return the gallery view hierarchy list for a specific user in the form of an ordered list of ids associated with gallery configs.\n\n",
        "operationId": "userGalleryViewHierarchy",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's gallery view hierarchy retrieved successfully."
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          },
          "409": {
            "description": "Database Integrity Violation"
          }
        },
        "x-developerInformation": "This endpoint will return the gallery view hierarchy list for a specific user in the form of an ordered list of ids associated with gallery configs.",
        "x-requiredPermissions": "ViewUserGalleryConfigHierarchy"
      }
    },
    "/v1/user/passwordReset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset a user password.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: This endpoint is used via an apikey from a reset email, the desired new password is provided as a string in the body.\n\n",
        "operationId": "resetPassword",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Password"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The password has been reset",
            "schema": {
              "$ref": "#/definitions/UserSession"
            }
          },
          "401": {
            "description": "The token is incorrect"
          }
        },
        "x-developerInformation": "This endpoint is used via an apikey from a reset email, the desired new password is provided as a string in the body."
      }
    },
    "/v1/user/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User registration.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "registerUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRegistration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has been registered.",
            "schema": {
              "$ref": "#/definitions/UserRegistration"
            }
          },
          "409": {
            "description": "There is a data conflict. The user with the same email address may have been already registered"
          }
        }
      }
    },
    "/v1/user/requestPasswordReset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request a password reset.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: Will always return 200.\n\n",
        "operationId": "requestPasswordReset",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PasswordResetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the email is associated with a user matches. An email has been sent.",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          }
        },
        "x-developerInformation": "Will always return 200."
      }
    },
    "/v1/user/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find users from the system.",
        "description": "<strong>Required Permissions</strong>: ViewUsers\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The users were found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "No users were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewUsers"
      }
    },
    "/v1/user/searchFields": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find users from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewUsers\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "userSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The users were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No users were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewUsers"
      }
    },
    "/v1/user/self": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update your current user safely.",
        "description": "<strong>Required Permissions</strong>: EditSelfSafe\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "selfUpdateSafe",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          },
          "409": {
            "description": "Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditSelfSafe"
      }
    },
    "/v1/user/usersAssociatedAddresses/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find all user's associated addresses from the system.",
        "description": "<strong>Required Permissions</strong>: ViewUsersAddresses\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The user was found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          }
        },
        "x-requiredPermissions": "ViewUsersAddresses"
      }
    },
    "/v1/user/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Find a user from the system.",
        "description": "<strong>Required Permissions</strong>: ViewUsers\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The user was found and returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          }
        },
        "x-requiredPermissions": "ViewUsers"
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update an existing user.",
        "description": "<strong>Required Permissions</strong>: EditUsers\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          },
          "409": {
            "description": "id in path and id in user object don't match or Database Integrity Violation"
          }
        },
        "x-requiredPermissions": "EditUsers"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteUsers\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The user was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user was found"
          }
        },
        "x-requiredPermissions": "DeleteUsers"
      }
    },
    "/v1/userConfig/assetDetailConfigs": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the asset detail config for a user.",
        "description": "<strong>Required Permissions</strong>: ViewAssetDetailConfigOptions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getAssetDetailConfig",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset detail configuration was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewAssetDetailConfigOptions"
      }
    },
    "/v1/userConfig/assetViewConfig": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Asset view configuration.",
        "description": "<strong>Required Permissions</strong>: ViewAssetQuickViewConfig\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getAssetViewConfig",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset view configuration was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewAssetQuickViewConfig"
      }
    },
    "/v1/userConfig/availableDeliveryLocations": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Delivery Locations.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getDeliveryLocations",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve the available delivery locations"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/baseProjectName": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the base project name.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getBaseProjectName",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The base project name was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/deliveryOptionIds": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Delivery Options.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getDeliveryOptions",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve the devlivery option ids"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/disableCartAccess": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Return whether or not cart is disabled.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "isDisableCartAccess",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Disable cart access was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/disablePerSecondPricing": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Return whether or not per second pricing is disabled.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "isDisablePerSecondPricing",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Per second pricing access was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/galleryOptions": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Gallery view options.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getGalleryConfigs",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve the gallery view option"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/licenseDocumentMatrix": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the license document matrix for a user",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getLicenseDocumentMatrix",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The script config combo was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/orderOptions": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the user order options for a user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getOrderOptions",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The order options were successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/payeeConfigId": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Payee Config Id",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getPayeeConfigId",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve the payee config Id"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/quoteOptions": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the quote options for a user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getQuoteOptions",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The quote options were successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userConfig/scriptConfigCombo": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the script configuration combo for a user.",
        "description": "<strong>Required Permissions</strong>: WZAdminReadConfiguration\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getScriptConfigCombo",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The script config combo was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "WZAdminReadConfiguration"
      }
    },
    "/v1/userConfig/searchOptions": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the search option for a user.",
        "description": "<strong>Required Permissions</strong>: ViewSearchOptions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getSearchOptions",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortId",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The search option was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewSearchOptions"
      }
    },
    "/v1/userConfig/tomConfig": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve configuration for TOM.",
        "description": "<strong>Required Permissions</strong>: ViewTOMConfigurations\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getTOMConfigurations",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The TOM configuration was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewTOMConfigurations"
      }
    },
    "/v1/userConfig/transcodeTargetConfigs": {
      "get": {
        "tags": [
          "User Configuration Retrieval"
        ],
        "summary": "Retrieve the transcode target config for a user.",
        "description": "<strong>Required Permissions</strong>: ViewTranscodeTargetConfigOptions\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getTranscodeTargetConfig",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The transcode target configuration was successfully retrieved for that user"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewTranscodeTargetConfigOptions"
      }
    },
    "/v1/userPreferences": {
      "get": {
        "tags": [
          "User Preferences"
        ],
        "summary": "Get the preferences for the current user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getForUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The preferences were successfully retrieved",
            "schema": {
              "$ref": "#/definitions/UserPreference"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "User Preferences"
        ],
        "summary": "Update the preferences for the current user. The body is a key value map.<strong> Key cannot contain '.'. It will be converted to _.</strong> ",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "updatePref",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The preferences were successfully updated",
            "schema": {
              "$ref": "#/definitions/UserPreference"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userPreferences/item": {
      "get": {
        "tags": [
          "User Preferences"
        ],
        "summary": "Get one preference value for the current user.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getForUser",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The preference value was successfully retrieved",
            "schema": {
              "$ref": "#/definitions/KeyValue"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "User Preferences"
        ],
        "summary": "One value of the preferences.<strong> Key cannot contain '.'. It will be converted to _.</strong>",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "updateOnePref",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The preferences were successfully updated",
            "schema": {
              "$ref": "#/definitions/KeyValue"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v1/userRole": {
      "post": {
        "tags": [
          "User Roles"
        ],
        "summary": "Create a user role.",
        "description": "<strong>Required Permissions</strong>: CreateUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userRoleCreate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user role was created successfully",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "400": {
            "description": "Database Integrity Violation"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Duplicate User Role"
          },
          "500": {
            "description": "Unable to create the userRole role"
          }
        },
        "x-requiredPermissions": "CreateUserRoles"
      }
    },
    "/v1/userRole/byIds": {
      "get": {
        "tags": [
          "User Roles"
        ],
        "summary": "Get a list of user roles.",
        "description": "<strong>Required Permissions</strong>: ViewUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userRoleList",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Comma Separated list of ids to retrieve",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user roles were found and returned",
            "schema": {
              "$ref": "#/definitions/ApiList"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user roles were found"
          }
        },
        "x-requiredPermissions": "ViewUserRoles"
      }
    },
    "/v1/userRole/defaultUserRole": {
      "get": {
        "tags": [
          "User Roles"
        ],
        "summary": "Retrieve default user role.",
        "description": "<strong>Required Permissions</strong>: ViewDefaultUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "getDefaultUserRole",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "description": "Optional site name for Root user",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The default user role was retrieved",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "ViewDefaultUserRoles"
      },
      "put": {
        "tags": [
          "User Roles"
        ],
        "summary": "Edit the default user role for a site.",
        "description": "<strong>Required Permissions</strong>: EditDefaultUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "updateDefaultUserRole",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "siteName",
            "in": "query",
            "description": "Optional site identifier for Root user",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-requiredPermissions": "EditDefaultUserRoles"
      }
    },
    "/v1/userRole/search": {
      "get": {
        "tags": [
          "User Roles"
        ],
        "summary": "Find user roles.",
        "description": "<strong>Required Permissions</strong>: ViewUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userRoleSearch",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query string",
            "required": false,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The user roles were found and returned",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "No user roles were found"
          }
        },
        "x-requiredPermissions": "ViewUserRoles"
      }
    },
    "/v1/userRole/searchFields": {
      "get": {
        "tags": [
          "User Roles"
        ],
        "summary": "Find user roles from the system by searchable fields.",
        "description": "<strong>Required Permissions</strong>: ViewUserRoles\n\n<strong>Developer Information</strong>: If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.\n\n",
        "operationId": "userRolesSearchByFields",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma Separated list of fields to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "values",
            "in": "query",
            "description": "Comma Separated list of values to search parallel to the fields provided",
            "required": true,
            "type": "string"
          },
          {
            "name": "s",
            "in": "query",
            "description": "Sort by",
            "required": false,
            "type": "string",
            "default": "createdOn"
          },
          {
            "name": "d",
            "in": "query",
            "description": "Sort descending",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "i",
            "in": "query",
            "description": "Page index",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "n",
            "in": "query",
            "description": "Number of results per page",
            "required": false,
            "type": "integer",
            "default": 20,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The user roles were found and returned",
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          "400": {
            "description": "No user roles were found"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          }
        },
        "x-developerInformation": "If you want to use an OR to check for multiple values of one field then the value provided should contain the values to be ORed separated by ||.",
        "x-requiredPermissions": "ViewUserRoles"
      }
    },
    "/v1/userRole/{id}": {
      "get": {
        "tags": [
          "User Roles"
        ],
        "summary": "Retrieve a role.",
        "description": "<strong>Required Permissions</strong>: ViewUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userRoleGet",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The user role was found and returned",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user role was found"
          }
        },
        "x-requiredPermissions": "ViewUserRoles"
      },
      "put": {
        "tags": [
          "User Roles"
        ],
        "summary": "Update an existing user role.",
        "description": "<strong>Required Permissions</strong>: EditUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userRoleUpdate",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user role was updated successfully",
            "schema": {
              "$ref": "#/definitions/UserRole"
            }
          },
          "400": {
            "description": "id in path and id in userRole role object don't match or Database Integrity Violation"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user role was found"
          },
          "409": {
            "description": "Duplicate User Role"
          }
        },
        "x-requiredPermissions": "EditUserRoles"
      },
      "delete": {
        "tags": [
          "User Roles"
        ],
        "summary": "Delete a user's role from the system.",
        "description": "<strong>Required Permissions</strong>: DeleteUserRoles\n\n<strong>Developer Information</strong>: There is no developer information provided for this endpoint.\n\n",
        "operationId": "userRoleDelete",
        "consumes": [
          "application/xml",
          "application/json"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The user role was deleted successfully"
          },
          "401": {
            "description": "Not Logged In"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No user role was found"
          }
        },
        "x-requiredPermissions": "DeleteUserRoles"
      }
    },
    "/v1/validate": {
      "get": {
        "tags": [
          "Authentication/Authorization"
        ],
        "summary": "Validate an authentication token.",
        "description": "<strong>Required Permissions</strong>: There are no required permissions for this endpoint.\n\n<strong>Developer Information</strong>: The credentials that need to be validated in this endpoint are the authentication token and the site name.\n\n",
        "operationId": "getAuthInfo",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "params",
            "in": "query",
            "description": "The token information needs to be authentication in the application/x-www-form-urlencoded form:<br>authScheme=Bearer&authSchemeData=[your authentication token]&siteName=[your account identifier]",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The token is valid.",
            "schema": {
              "$ref": "#/definitions/Identity"
            }
          },
          "401": {
            "description": "The token is not valid"
          }
        },
        "x-developerInformation": "The credentials that need to be validated in this endpoint are the authentication token and the site name."
      }
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "accountIdentifier",
        "name",
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "searchConfiguration": {
          "$ref": "#/definitions/SearchConfiguration"
        },
        "renditionTypeConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "quoteMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "orderMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cartMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purchaseOnCredit": {
          "type": "boolean",
          "default": false
        },
        "assetDetailConfigIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "transcodeTargetConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "defaultSort": {
          "type": "integer",
          "format": "int64"
        },
        "tomConfig": {
          "$ref": "#/definitions/TomConfig"
        },
        "assetViewConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetViewConfig"
          }
        },
        "baseProjectName": {
          "type": "string"
        },
        "disableCartAccess": {
          "type": "boolean",
          "default": false
        },
        "loginRedirectUrl": {
          "type": "string"
        },
        "galleryConfigHierarchy": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "scriptConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "paymentOptionRulesId": {
          "type": "integer",
          "format": "int64"
        },
        "licenseDocumentId": {
          "type": "integer",
          "format": "int64"
        },
        "priceFilter": {
          "type": "string"
        },
        "disablePerSecondPricing": {
          "type": "boolean",
          "default": false
        },
        "availableDeliveryLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryLocation"
          }
        },
        "deliveryOptionIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "payeeConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "accountIdentifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "contact": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "email": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "logoURL": {
          "type": "string"
        },
        "billingInfo": {
          "$ref": "#/definitions/BillingInfo"
        },
        "paymentTerms": {
          "type": "string"
        },
        "creditExemption": {
          "type": "string"
        },
        "licensingVertical": {
          "type": "string"
        },
        "contractDiscount": {
          "type": "number",
          "format": "double"
        },
        "offlineAgreementId": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        },
        "childId": {
          "type": "string"
        },
        "salesOwner": {
          "type": "string"
        },
        "salesForceId": {
          "type": "string"
        },
        "salesForceRecordTypeId": {
          "type": "string"
        },
        "legacyId": {
          "type": "string"
        },
        "salesForceAccountNumber": {
          "type": "string"
        },
        "salesForceSyncedError": {
          "type": "boolean",
          "default": false
        },
        "createdByIntegration": {
          "type": "boolean",
          "default": false
        },
        "paymentTermsDays": {
          "type": "integer",
          "format": "int32"
        },
        "admin": {
          "type": "boolean",
          "default": false
        },
        "default": {
          "type": "boolean",
          "default": false
        },
        "defaultAccount": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "AuthenticationToken": {
      "type": "object",
      "required": [
        "token",
        "tokenType"
      ],
      "properties": {
        "token": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        },
        "expireInSeconds": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiListAccount": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "zipcode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "suburb": {
          "type": "string"
        }
      }
    },
    "PageDocument": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Document"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OutputStream": {
      "type": "object"
    },
    "PageAssetDetailConfig": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetDetailConfig"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Document": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "documentType": {
          "type": "string"
        },
        "documentStatus": {
          "type": "string",
          "enum": [
            "Active",
            "Inactive"
          ]
        },
        "language": {
          "type": "string"
        },
        "documentContentType": {
          "type": "string"
        },
        "documentUri": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "fileId": {
          "type": "string"
        }
      }
    },
    "PageUser": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PasswordResetRequest": {
      "type": "object",
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "siteName": {
          "type": "string"
        }
      }
    },
    "BulkUpdateAccount": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "userIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "SortSingle": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "descending": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "subtype": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "wildcardSubtype": {
          "type": "boolean",
          "default": false
        },
        "wildcardType": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "UserPreference": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "prefs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PageLicenseDocumentMatrix": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseDocumentMatrix"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeliveryLocation": {
      "type": "object",
      "properties": {
        "deliveryLocationId": {
          "type": "string"
        },
        "deliveryLocationName": {
          "type": "string"
        }
      }
    },
    "Identity": {
      "type": "object",
      "properties": {
        "authToken": {
          "$ref": "#/definitions/AuthenticationToken"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "PageCollection": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collection"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ApiListKeyValue": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        }
      }
    },
    "PageRenditionTypeConfig": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RenditionTypeConfig"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AssetViewConfig": {
      "type": "object",
      "properties": {
        "viewType": {
          "type": "string",
          "enum": [
            "GridView",
            "TextView",
            "SpeedView",
            "ListView",
            "CartView",
            "OrderView"
          ]
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PageUserRole": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRole"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ApiListUUID": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "Translation": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "PagePayeeConfig": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayeeConfig"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ShareInfo": {
      "type": "object",
      "properties": {
        "userEmail": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "collections": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "accessLevel": {
          "type": "string",
          "enum": [
            "Editor",
            "Viewer",
            "Root"
          ]
        },
        "comment": {
          "type": "string"
        },
        "project": {
          "type": "string"
        }
      }
    },
    "CommentEdit": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "access": {
          "type": "string",
          "enum": [
            "Commenter",
            "Editor",
            "Viewer",
            "Root"
          ]
        },
        "timeStart": {
          "type": "string"
        },
        "timeEnd": {
          "type": "string"
        }
      }
    },
    "UserPrincipal": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "siteName": {
          "type": "string"
        },
        "loggedInSiteName": {
          "type": "string"
        },
        "userApiKey": {
          "type": "string"
        },
        "clientHost": {
          "type": "string"
        },
        "tokenExpired": {
          "type": "boolean",
          "default": false
        },
        "bearerUserToken": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DataSource": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "outputStream": {
          "$ref": "#/definitions/OutputStream"
        },
        "name": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        }
      }
    },
    "CommandInfo": {
      "type": "object",
      "properties": {
        "commandName": {
          "type": "string"
        },
        "commandClass": {
          "type": "string"
        }
      }
    },
    "PageGalleryConfig": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GalleryConfig"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AssetDetailConfig": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "primary": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "secondary": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "common": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "CollectionItem": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid"
        },
        "assetId": {
          "type": "integer",
          "format": "int64"
        },
        "timeStart": {
          "type": "string"
        },
        "timeEnd": {
          "type": "string"
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "uriBuilder": {
          "$ref": "#/definitions/UriBuilder"
        },
        "rel": {
          "type": "string"
        },
        "rels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "params": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "PageFeeConfig": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeeConfig"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Site": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "searchConfiguration": {
          "$ref": "#/definitions/SearchConfiguration"
        },
        "renditionTypeConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "quoteMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "orderMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cartMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purchaseOnCredit": {
          "type": "boolean",
          "default": false
        },
        "assetDetailConfigIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "transcodeTargetConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "defaultSort": {
          "type": "integer",
          "format": "int64"
        },
        "tomConfig": {
          "$ref": "#/definitions/TomConfig"
        },
        "assetViewConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetViewConfig"
          }
        },
        "baseProjectName": {
          "type": "string"
        },
        "disableCartAccess": {
          "type": "boolean",
          "default": false
        },
        "loginRedirectUrl": {
          "type": "string"
        },
        "galleryConfigHierarchy": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "scriptConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "paymentOptionRulesId": {
          "type": "integer",
          "format": "int64"
        },
        "licenseDocumentId": {
          "type": "integer",
          "format": "int64"
        },
        "priceFilter": {
          "type": "string"
        },
        "disablePerSecondPricing": {
          "type": "boolean",
          "default": false
        },
        "availableDeliveryLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryLocation"
          }
        },
        "deliveryOptionIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "payeeConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "displayName": {
          "type": "string"
        },
        "siteUrl": {
          "type": "string"
        },
        "accountIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "registrationRedirectUrl": {
          "type": "string"
        },
        "applicationBaseUrl": {
          "type": "string"
        },
        "defaultAccountFilter": {
          "type": "string"
        },
        "searchApiKey": {
          "type": "string"
        },
        "disableAnonymousPricing": {
          "type": "boolean",
          "default": false
        },
        "viewableIndexedFields": {
          "$ref": "#/definitions/ViewableIndexedFields"
        },
        "enforcedDocumentNames": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "disableSelfRegistration": {
          "type": "boolean",
          "default": false
        },
        "stripePublicKey": {
          "type": "string"
        },
        "emailInfo": {
          "$ref": "#/definitions/EmailInfo"
        },
        "restrictRegistration": {
          "type": "boolean",
          "default": false
        },
        "documentTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentType"
          }
        },
        "nonBillableAccountIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "disableCommerceAgreements": {
          "type": "boolean",
          "default": false
        },
        "anonymousPriceFilter": {
          "type": "string"
        },
        "disableAnonymousPerSecondPricing": {
          "type": "boolean",
          "default": false
        },
        "anonymousDeliveryOptionIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "core": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ChangePassword": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "CommonIndexedFields": {
      "type": "object",
      "properties": {
        "fieldNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fieldNameRegex": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "KeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ApiListUserRole": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRole"
          }
        }
      }
    },
    "ApiListZkFieldValue": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZkFieldValue"
          }
        }
      }
    },
    "SearchFilter": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "ExclusiveList",
            "List",
            "Link",
            "Text",
            "DateRange",
            "None"
          ]
        },
        "name": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "fieldValue": {
          "type": "string"
        },
        "alwaysShown": {
          "type": "boolean",
          "default": false
        },
        "subFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFilter"
          }
        }
      }
    },
    "DataHandler": {
      "type": "object",
      "properties": {
        "dataSource": {
          "$ref": "#/definitions/DataSource"
        },
        "transferDataFlavors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFlavor"
          }
        },
        "preferredCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandInfo"
          }
        },
        "allCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandInfo"
          }
        },
        "contentType": {
          "type": "string"
        },
        "outputStream": {
          "$ref": "#/definitions/OutputStream"
        },
        "name": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        },
        "content": {
          "type": "object"
        }
      }
    },
    "BillingInfo": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "method": {
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "FeeConfig": {
      "type": "object",
      "required": [
        "amount",
        "name",
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "financeCode": {
          "type": "string"
        },
        "paymentRestriction": {
          "type": "string"
        },
        "accountId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataFlavor": {
      "type": "object",
      "properties": {
        "mimeType": {
          "type": "string"
        },
        "humanPresentableName": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "primaryType": {
          "type": "string"
        },
        "mimeTypeSerializedObject": {
          "type": "boolean",
          "default": false
        },
        "defaultRepresentationClassAsString": {
          "type": "string"
        },
        "representationClassInputStream": {
          "type": "boolean",
          "default": false
        },
        "representationClassReader": {
          "type": "boolean",
          "default": false
        },
        "representationClassCharBuffer": {
          "type": "boolean",
          "default": false
        },
        "representationClassByteBuffer": {
          "type": "boolean",
          "default": false
        },
        "representationClassSerializable": {
          "type": "boolean",
          "default": false
        },
        "representationClassRemote": {
          "type": "boolean",
          "default": false
        },
        "flavorSerializedObjectType": {
          "type": "boolean",
          "default": false
        },
        "flavorRemoteObjectType": {
          "type": "boolean",
          "default": false
        },
        "flavorJavaFileListType": {
          "type": "boolean",
          "default": false
        },
        "flavorTextType": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "PageApiToken": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiToken"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NewCookie": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "maxAge": {
          "type": "integer",
          "format": "int32"
        },
        "expiry": {
          "type": "string",
          "format": "date-time"
        },
        "secure": {
          "type": "boolean",
          "default": false
        },
        "httpOnly": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "RenditionUseTypeConfig": {
      "type": "object",
      "required": [
        "name",
        "useType"
      ],
      "properties": {
        "configMatrix": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RenditionConfigInfo"
          }
        },
        "name": {
          "type": "string"
        },
        "useType": {
          "type": "string"
        }
      }
    },
    "PageSearchFilter": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchFilter"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ScriptConfigCombo": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "site": {
          "$ref": "#/definitions/Site"
        },
        "config": {
          "$ref": "#/definitions/ScriptConfiguration"
        }
      }
    },
    "LoginInfo": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "siteName": {
          "type": "string"
        }
      }
    },
    "UserRegistration": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "termsAgreedTo": {
          "type": "string"
        }
      }
    },
    "PageSiteConfig": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SiteConfig"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BulkUpdateRole": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int64"
        },
        "userIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "RenditionConfigInfo": {
      "type": "object",
      "required": [
        "browserType",
        "osType",
        "scheme"
      ],
      "properties": {
        "osType": {
          "type": "string",
          "enum": [
            "Any",
            "Mobile",
            "NonMobile"
          ]
        },
        "browserType": {
          "type": "string",
          "enum": [
            "Any",
            "Chrome",
            "Edge",
            "Safari",
            "Firefox",
            "Opera",
            "IE"
          ]
        },
        "purpose": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "watermark": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "variant": {
          "type": "string"
        },
        "formats": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "viewContext": {
          "type": "string",
          "enum": [
            "BROWSER",
            "DOWNLOAD",
            "HTML5",
            "FLASH"
          ]
        },
        "formatInclusive": {
          "type": "boolean",
          "default": false
        },
        "returnAsperaRequest": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "SiteViewableIndexedFields": {
      "type": "object",
      "properties": {
        "commonIndexedFields": {
          "$ref": "#/definitions/CommonIndexedFields"
        },
        "viewAbleIndexedFields": {
          "$ref": "#/definitions/ViewableIndexedFields"
        }
      }
    },
    "GalleryViewOption": {
      "type": "object",
      "properties": {
        "searchOption": {
          "$ref": "#/definitions/SearchOption"
        },
        "galleryConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GalleryConfig"
          }
        }
      }
    },
    "SortDefinition": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "uniqueIdentifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pairId": {
          "type": "string"
        },
        "association": {
          "type": "string"
        },
        "sorts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SortSingle"
          }
        },
        "default": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "PayeeConfig": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "payee": {
          "$ref": "#/definitions/Payee"
        }
      }
    },
    "ZkFieldValue": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Locale": {
      "type": "object",
      "properties": {
        "script": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "variant": {
          "type": "string"
        },
        "extensionKeys": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "unicodeLocaleAttributes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "unicodeLocaleKeys": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "iso3Language": {
          "type": "string"
        },
        "iso3Country": {
          "type": "string"
        },
        "displayLanguage": {
          "type": "string"
        },
        "displayScript": {
          "type": "string"
        },
        "displayCountry": {
          "type": "string"
        },
        "displayVariant": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "PageSite": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Site"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "QuoteOptions": {
      "type": "object",
      "properties": {
        "quoteMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purchaseOnCredit": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Page": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "object": {
          "type": "object"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "dataHandler": {
          "$ref": "#/definitions/DataHandler"
        },
        "contentId": {
          "type": "string"
        },
        "contentType": {
          "$ref": "#/definitions/MediaType"
        }
      }
    },
    "DocumentAgreement": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "document": {
          "$ref": "#/definitions/Document"
        },
        "version": {
          "$ref": "#/definitions/Version"
        }
      }
    },
    "Version": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "length": {
          "type": "integer",
          "format": "int64"
        },
        "uploadDate": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "documentId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ApiListDeliveryLocation": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryLocation"
          }
        }
      }
    },
    "ApiListCollectionItem": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CollectionItem"
          }
        }
      }
    },
    "UserSession": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/AuthenticationToken"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "documentsRequiringAgreement": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userPreferences": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "siteFeatures": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "loginRedirectUrl": {
          "type": "string"
        }
      }
    },
    "PageDocumentAgreement": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentAgreement"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EmailInfo": {
      "type": "object",
      "properties": {
        "fromEmail": {
          "type": "string"
        },
        "fromEmailName": {
          "type": "string"
        },
        "templateIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "notificationEmail": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UriBuilder": {
      "type": "object"
    },
    "PageTranslation": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Translation"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RenditionTypeConfig": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "useTypeConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RenditionUseTypeConfig"
          }
        }
      }
    },
    "RegistrationEmailList": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "emailList": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/RegisterEmail"
          }
        }
      }
    },
    "PageDeliveryOption": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryOption"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PaymentAddress": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "entity": {
          "type": "string"
        },
        "swiftCode": {
          "type": "string"
        },
        "routingNumber": {
          "type": "string"
        },
        "creditOf": {
          "type": "string"
        },
        "creditAccount": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "SearchOption": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string"
        },
        "priceFilter": {
          "type": "string"
        },
        "metaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allSearchableFields": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "fieldMaps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "typeAheadFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "typeAheadThesaurus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "searchFilterTreeId": {
          "type": "integer",
          "format": "int64"
        },
        "sort": {
          "$ref": "#/definitions/SortDefinition"
        }
      }
    },
    "LicenseDocumentMatrix": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "configList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LicenseDocumentConfig"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ShareResponse": {
      "type": "object",
      "properties": {
        "editors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "viewers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessInfo": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Collection": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "integer",
          "format": "int64"
        },
        "editors": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "viewers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "createdByIntegration": {
          "type": "boolean",
          "default": false
        },
        "oldCommerceId": {
          "type": "integer",
          "format": "int64"
        },
        "editorsCount": {
          "type": "integer",
          "format": "int32"
        },
        "tagsCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ScriptConfiguration": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "script": {
          "type": "string"
        }
      }
    },
    "Payee": {
      "type": "object",
      "properties": {
        "payeeName": {
          "type": "string"
        },
        "logoUrl": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "taxId": {
          "type": "string"
        },
        "businessAddress": {
          "$ref": "#/definitions/Address"
        },
        "paymentAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentAddress"
          }
        }
      }
    },
    "PageScriptConfiguration": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScriptConfiguration"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageRegistrationEmailList": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegistrationEmailList"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ConfigValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigValue"
          }
        },
        "components": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigValue"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "password",
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "searchConfiguration": {
          "$ref": "#/definitions/SearchConfiguration"
        },
        "renditionTypeConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "quoteMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "orderMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cartMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purchaseOnCredit": {
          "type": "boolean",
          "default": false
        },
        "assetDetailConfigIds": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "transcodeTargetConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "defaultSort": {
          "type": "integer",
          "format": "int64"
        },
        "tomConfig": {
          "$ref": "#/definitions/TomConfig"
        },
        "assetViewConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetViewConfig"
          }
        },
        "baseProjectName": {
          "type": "string"
        },
        "disableCartAccess": {
          "type": "boolean",
          "default": false
        },
        "loginRedirectUrl": {
          "type": "string"
        },
        "galleryConfigHierarchy": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "scriptConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "paymentOptionRulesId": {
          "type": "integer",
          "format": "int64"
        },
        "licenseDocumentId": {
          "type": "integer",
          "format": "int64"
        },
        "priceFilter": {
          "type": "string"
        },
        "disablePerSecondPricing": {
          "type": "boolean",
          "default": false
        },
        "availableDeliveryLocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryLocation"
          }
        },
        "deliveryOptionIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "payeeConfigId": {
          "type": "integer",
          "format": "int64"
        },
        "emailAddress": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/UserRole"
          }
        },
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "contentAccessFilter": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "ownedCollections": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "editableCollections": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "accessibleCollections": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "salesForceId": {
          "type": "string"
        },
        "salesForceSyncedError": {
          "type": "boolean",
          "default": false
        },
        "salesForceWazeeId": {
          "type": "string"
        },
        "oldCommerceId": {
          "type": "string"
        },
        "createdByIntegration": {
          "type": "boolean",
          "default": false
        },
        "masterAccess": {
          "type": "boolean",
          "default": false
        },
        "emailOptOut": {
          "type": "boolean",
          "default": false
        },
        "billingInfo": {
          "$ref": "#/definitions/BillingInfo"
        },
        "discountedScreenerCBS": {
          "type": "boolean",
          "default": false
        },
        "agreedToDocuments": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "salesForceObjectId": {
          "type": "string"
        },
        "allCollections": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "root": {
          "type": "boolean",
          "default": false
        },
        "allUserPermissions": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "PageActivityAudit": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivityAudit"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ApiList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "PageAccount": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RegisterEmail": {
      "type": "object",
      "properties": {
        "registered": {
          "type": "boolean",
          "default": false
        },
        "emailAddress": {
          "type": "string"
        },
        "registerDate": {
          "type": "string",
          "format": "date-time"
        },
        "defaultAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "defaultRoleId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "GalleryConfig": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "fieldName": {
          "type": "string"
        },
        "optionalValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "luceneQuery": {
          "type": "string"
        },
        "defaultThumbnailUrl": {
          "type": "string"
        },
        "sortOrder": {
          "type": "string"
        },
        "autoExpand": {
          "type": "boolean",
          "default": false
        },
        "fieldNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "child": {
          "$ref": "#/definitions/GalleryConfig"
        }
      }
    },
    "OrderOptions": {
      "type": "object",
      "properties": {
        "orderMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cartMetaDataFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purchaseOnCredit": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ZkProperties": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValue"
          }
        }
      }
    },
    "DeliveryOption": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "groupOrder": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        },
        "sourceUseType": {
          "type": "string"
        },
        "orderType": {
          "type": "string"
        },
        "transferType": {
          "type": "string",
          "enum": [
            "download",
            "aspera",
            "location"
          ]
        },
        "locationId": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        }
      }
    },
    "TomConfig": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "awsShippingDockBase": {
          "type": "string"
        },
        "datacenterShippingDockBase": {
          "type": "string"
        },
        "downloadBaseUrl": {
          "type": "string"
        }
      }
    },
    "EntityTag": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "weak": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ActivityAudit": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "activities": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "activityName": {
          "type": "string"
        }
      }
    },
    "Password": {
      "type": "object",
      "properties": {
        "newPassword": {
          "type": "string"
        }
      }
    },
    "Comment": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "objectType": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "nestedObjectType": {
          "type": "string"
        },
        "nestedObjectId": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean",
          "default": false
        },
        "comment": {
          "type": "string"
        },
        "access": {
          "type": "string",
          "enum": [
            "Commenter",
            "Editor",
            "Viewer",
            "Root"
          ]
        },
        "timeStart": {
          "type": "string"
        },
        "timeEnd": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "TranscodeTargetConfig": {
      "type": "object",
      "required": [
        "siteName",
        "transcodeTargetMap"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "transcodeTargetMap": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "DocumentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "AccessInfo": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "sharerId": {
          "type": "integer",
          "format": "int64"
        },
        "recipientIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "apiKey": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "asset",
            "collection",
            "passwordReset"
          ]
        },
        "accessInfo": {
          "type": "string"
        },
        "recipientEmails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "comment": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "accessStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "accessEndDate": {
          "type": "string",
          "format": "date-time"
        },
        "disabled": {
          "type": "boolean",
          "default": false
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "emailStatus": {
          "type": "string",
          "enum": [
            "failed",
            "sent",
            "unattempted"
          ]
        },
        "recipientAccountId": {
          "type": "integer",
          "format": "int64"
        },
        "accessStatus": {
          "type": "string",
          "enum": [
            "pending",
            "active",
            "expired",
            "disabled"
          ]
        }
      }
    },
    "SearchConfiguration": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string"
        },
        "anonymousUserFilter": {
          "type": "string"
        },
        "searchableFields": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "searchResultFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "fieldMaps": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "typeAheadFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "typeAheadThesaurus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disableAnonymousSearch": {
          "type": "boolean",
          "default": false
        },
        "disableAnonymousDetails": {
          "type": "boolean",
          "default": false
        },
        "searchFilterTreeId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SiteConfig": {
      "type": "object",
      "required": [
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "components": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigValue"
          }
        },
        "config": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigValue"
          }
        }
      }
    },
    "PageTranscodeTargetConfig": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TranscodeTargetConfig"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int64"
        },
        "currentPage": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "hasNextPage": {
          "type": "boolean",
          "default": false
        },
        "hasPreviousPage": {
          "type": "boolean",
          "default": false
        },
        "numberOfPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Response": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "statusInfo": {
          "$ref": "#/definitions/StatusType"
        },
        "allowedMethods": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "entityTag": {
          "$ref": "#/definitions/EntityTag"
        },
        "links": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "stringHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "entity": {
          "type": "object"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "cookies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/NewCookie"
          }
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "length": {
          "type": "integer",
          "format": "int32"
        },
        "language": {
          "$ref": "#/definitions/Locale"
        },
        "location": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "ContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "UserRole": {
      "type": "object",
      "required": [
        "name",
        "siteName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StatusType": {
      "type": "object",
      "properties": {
        "statusCode": {
          "type": "integer",
          "format": "int32"
        },
        "reasonPhrase": {
          "type": "string"
        },
        "family": {
          "type": "string",
          "enum": [
            "INFORMATIONAL",
            "SUCCESSFUL",
            "REDIRECTION",
            "CLIENT_ERROR",
            "SERVER_ERROR",
            "OTHER"
          ]
        }
      }
    },
    "ApiListUser": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "ApiToken": {
      "type": "object",
      "required": [
        "siteName",
        "type",
        "userId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "siteName": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "SYSTEM",
            "ACCOUNT"
          ]
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ViewableIndexedFields": {
      "type": "object",
      "properties": {
        "fieldRegex": {
          "type": "string"
        },
        "fields": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LicenseDocumentConfig": {
      "type": "object",
      "properties": {
        "purchaseTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "reproductionRights": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "projectTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "documentType": {
          "type": "string"
        }
      }
    }
  }
}